/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package com.bd.asn.zte.data.pgw_r8_new;

import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import java.io.*;


public class ChangeOfCharCondition implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private QoSInformation qosRequested = null;
	private QoSInformation qosNegotiated = null;
	private DataVolumeGPRS dataVolumeGPRSUplink = null;
	private DataVolumeGPRS dataVolumeGPRSDownlink = null;
	private ChangeCondition changeCondition = null;
	private TimeStamp changeTime = null;
	private BerInteger tariffLevel = null;
	private UserLocationInformation ePCUserLocationInformation = null;
	private EPCQoSInformation ePCQoSInformation = null;
	private UWANUserLocationInfo uWANUserLocationInformation = null;
	private CPCIoTEPSOptimisationIndicator cPCIoTEPSOptimisationIndicator = null;
	private ServingPLMNRateControl servingPLMNRateControl = null;
	
	public ChangeOfCharCondition() {
	}

	public ChangeOfCharCondition(byte[] code) {
		this.code = code;
	}

	public void setQosRequested(QoSInformation qosRequested) {
		this.qosRequested = qosRequested;
	}

	public QoSInformation getQosRequested() {
		return qosRequested;
	}

	public void setQosNegotiated(QoSInformation qosNegotiated) {
		this.qosNegotiated = qosNegotiated;
	}

	public QoSInformation getQosNegotiated() {
		return qosNegotiated;
	}

	public void setDataVolumeGPRSUplink(DataVolumeGPRS dataVolumeGPRSUplink) {
		this.dataVolumeGPRSUplink = dataVolumeGPRSUplink;
	}

	public DataVolumeGPRS getDataVolumeGPRSUplink() {
		return dataVolumeGPRSUplink;
	}

	public void setDataVolumeGPRSDownlink(DataVolumeGPRS dataVolumeGPRSDownlink) {
		this.dataVolumeGPRSDownlink = dataVolumeGPRSDownlink;
	}

	public DataVolumeGPRS getDataVolumeGPRSDownlink() {
		return dataVolumeGPRSDownlink;
	}

	public void setChangeCondition(ChangeCondition changeCondition) {
		this.changeCondition = changeCondition;
	}

	public ChangeCondition getChangeCondition() {
		return changeCondition;
	}

	public void setChangeTime(TimeStamp changeTime) {
		this.changeTime = changeTime;
	}

	public TimeStamp getChangeTime() {
		return changeTime;
	}

	public void setTariffLevel(BerInteger tariffLevel) {
		this.tariffLevel = tariffLevel;
	}

	public BerInteger getTariffLevel() {
		return tariffLevel;
	}

	public void setEPCUserLocationInformation(UserLocationInformation ePCUserLocationInformation) {
		this.ePCUserLocationInformation = ePCUserLocationInformation;
	}

	public UserLocationInformation getEPCUserLocationInformation() {
		return ePCUserLocationInformation;
	}

	public void setEPCQoSInformation(EPCQoSInformation ePCQoSInformation) {
		this.ePCQoSInformation = ePCQoSInformation;
	}

	public EPCQoSInformation getEPCQoSInformation() {
		return ePCQoSInformation;
	}

	public void setUWANUserLocationInformation(UWANUserLocationInfo uWANUserLocationInformation) {
		this.uWANUserLocationInformation = uWANUserLocationInformation;
	}

	public UWANUserLocationInfo getUWANUserLocationInformation() {
		return uWANUserLocationInformation;
	}

	public void setCPCIoTEPSOptimisationIndicator(CPCIoTEPSOptimisationIndicator cPCIoTEPSOptimisationIndicator) {
		this.cPCIoTEPSOptimisationIndicator = cPCIoTEPSOptimisationIndicator;
	}

	public CPCIoTEPSOptimisationIndicator getCPCIoTEPSOptimisationIndicator() {
		return cPCIoTEPSOptimisationIndicator;
	}

	public void setServingPLMNRateControl(ServingPLMNRateControl servingPLMNRateControl) {
		this.servingPLMNRateControl = servingPLMNRateControl;
	}

	public ServingPLMNRateControl getServingPLMNRateControl() {
		return servingPLMNRateControl;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (servingPLMNRateControl != null) {
			codeLength += servingPLMNRateControl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 20
			reverseOS.write(0xB4);
			codeLength += 1;
		}
		
		if (cPCIoTEPSOptimisationIndicator != null) {
			codeLength += cPCIoTEPSOptimisationIndicator.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 19
			reverseOS.write(0x93);
			codeLength += 1;
		}
		
		if (uWANUserLocationInformation != null) {
			codeLength += uWANUserLocationInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 17
			reverseOS.write(0xB1);
			codeLength += 1;
		}
		
		if (ePCQoSInformation != null) {
			codeLength += ePCQoSInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		if (ePCUserLocationInformation != null) {
			codeLength += ePCUserLocationInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (tariffLevel != null) {
			codeLength += tariffLevel.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (changeTime != null) {
			codeLength += changeTime.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (changeCondition != null) {
			codeLength += changeCondition.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (dataVolumeGPRSDownlink != null) {
			codeLength += dataVolumeGPRSDownlink.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (dataVolumeGPRSUplink != null) {
			codeLength += dataVolumeGPRSUplink.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (qosNegotiated != null) {
			sublength = qosNegotiated.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
		}
		
		if (qosRequested != null) {
			sublength = qosRequested.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			reverseOS.write(0xA1);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		if (totalLength == -1) {
			subCodeLength += berTag.decode(is);

			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				subCodeLength += length.decode(is);
				qosRequested = new QoSInformation();
				int choiceDecodeLength = qosRequested.decode(is, null);
				if (choiceDecodeLength != 0) {
					subCodeLength += choiceDecodeLength;
					subCodeLength += berTag.decode(is);
				}
				else {
					qosRequested = null;
				}

			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
				subCodeLength += length.decode(is);
				qosNegotiated = new QoSInformation();
				int choiceDecodeLength = qosNegotiated.decode(is, null);
				if (choiceDecodeLength != 0) {
					subCodeLength += choiceDecodeLength;
					subCodeLength += berTag.decode(is);
				}
				else {
					qosNegotiated = null;
				}

			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				dataVolumeGPRSUplink = new DataVolumeGPRS();
				subCodeLength += dataVolumeGPRSUplink.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				dataVolumeGPRSDownlink = new DataVolumeGPRS();
				subCodeLength += dataVolumeGPRSDownlink.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				changeCondition = new ChangeCondition();
				subCodeLength += changeCondition.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
				changeTime = new TimeStamp();
				subCodeLength += changeTime.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				tariffLevel = new BerInteger();
				subCodeLength += tariffLevel.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
				ePCUserLocationInformation = new UserLocationInformation();
				subCodeLength += ePCUserLocationInformation.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
				ePCQoSInformation = new EPCQoSInformation();
				subCodeLength += ePCQoSInformation.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 17)) {
				uWANUserLocationInformation = new UWANUserLocationInfo();
				subCodeLength += uWANUserLocationInformation.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 19)) {
				cPCIoTEPSOptimisationIndicator = new CPCIoTEPSOptimisationIndicator();
				subCodeLength += cPCIoTEPSOptimisationIndicator.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 20)) {
				servingPLMNRateControl = new ServingPLMNRateControl();
				subCodeLength += servingPLMNRateControl.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			int nextByte = is.read();
			if (berTag.tagNumber != 0 || berTag.tagClass != 0 || berTag.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			subCodeLength += length.decode(is);
			qosRequested = new QoSInformation();
			subCodeLength += qosRequested.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			subCodeLength += length.decode(is);
			qosNegotiated = new QoSInformation();
			subCodeLength += qosNegotiated.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			dataVolumeGPRSUplink = new DataVolumeGPRS();
			subCodeLength += dataVolumeGPRSUplink.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			dataVolumeGPRSDownlink = new DataVolumeGPRS();
			subCodeLength += dataVolumeGPRSDownlink.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			changeCondition = new ChangeCondition();
			subCodeLength += changeCondition.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			changeTime = new TimeStamp();
			subCodeLength += changeTime.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			tariffLevel = new BerInteger();
			subCodeLength += tariffLevel.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			ePCUserLocationInformation = new UserLocationInformation();
			subCodeLength += ePCUserLocationInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			ePCQoSInformation = new EPCQoSInformation();
			subCodeLength += ePCQoSInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 17)) {
			uWANUserLocationInformation = new UWANUserLocationInfo();
			subCodeLength += uWANUserLocationInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 19)) {
			cPCIoTEPSOptimisationIndicator = new CPCIoTEPSOptimisationIndicator();
			subCodeLength += cPCIoTEPSOptimisationIndicator.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 20)) {
			servingPLMNRateControl = new ServingPLMNRateControl();
			subCodeLength += servingPLMNRateControl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (qosRequested != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("qosRequested: ");
			qosRequested.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (qosNegotiated != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("qosNegotiated: ");
			qosNegotiated.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (dataVolumeGPRSUplink != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dataVolumeGPRSUplink: ").append(dataVolumeGPRSUplink);
			firstSelectedElement = false;
		}
		
		if (dataVolumeGPRSDownlink != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dataVolumeGPRSDownlink: ").append(dataVolumeGPRSDownlink);
			firstSelectedElement = false;
		}
		
		if (changeCondition != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("changeCondition: ").append(changeCondition);
			firstSelectedElement = false;
		}
		
		if (changeTime != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("changeTime: ").append(changeTime);
			firstSelectedElement = false;
		}
		
		if (tariffLevel != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("tariffLevel: ").append(tariffLevel);
			firstSelectedElement = false;
		}
		
		if (ePCUserLocationInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ePCUserLocationInformation: ").append(ePCUserLocationInformation);
			firstSelectedElement = false;
		}
		
		if (ePCQoSInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ePCQoSInformation: ");
			ePCQoSInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (uWANUserLocationInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("uWANUserLocationInformation: ");
			uWANUserLocationInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (cPCIoTEPSOptimisationIndicator != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cPCIoTEPSOptimisationIndicator: ").append(cPCIoTEPSOptimisationIndicator);
			firstSelectedElement = false;
		}
		
		if (servingPLMNRateControl != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servingPLMNRateControl: ");
			servingPLMNRateControl.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

