/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package com.bd.asn.zte.data.pgw_r8_new;

import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import java.io.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


public class ChangeOfServiceCondition implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class AFRecordInformation implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<com.bd.asn.zte.data.pgw_r8_new.AFRecordInformation> seqOf = null;

		public AFRecordInformation() {
			seqOf = new ArrayList<com.bd.asn.zte.data.pgw_r8_new.AFRecordInformation>();
		}

		public AFRecordInformation(byte[] code) {
			this.code = code;
		}

		public List<com.bd.asn.zte.data.pgw_r8_new.AFRecordInformation> getAFRecordInformation() {
			if (seqOf == null) {
				seqOf = new ArrayList<com.bd.asn.zte.data.pgw_r8_new.AFRecordInformation>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			if (length.val == -1) {
				while (true) {
					subCodeLength += berTag.decode(is);

					if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
						int nextByte = is.read();
						if (nextByte != 0) {
							if (nextByte == -1) {
								throw new EOFException("Unexpected end of input stream.");
							}
							throw new IOException("Decoded sequence has wrong end of contents octets");
						}
						codeLength += subCodeLength + 1;
						return codeLength;
					}

					com.bd.asn.zte.data.pgw_r8_new.AFRecordInformation element = new com.bd.asn.zte.data.pgw_r8_new.AFRecordInformation();
					subCodeLength += element.decode(is, false);
					seqOf.add(element);
				}
			}
			while (subCodeLength < totalLength) {
				com.bd.asn.zte.data.pgw_r8_new.AFRecordInformation element = new com.bd.asn.zte.data.pgw_r8_new.AFRecordInformation();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<com.bd.asn.zte.data.pgw_r8_new.AFRecordInformation> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private RatingGroupId ratingGroup = null;
	private ChargingRuleBaseName chargingRuleBaseName = null;
	private ResultCode resultCode = null;
	private BerInteger localSequenceNumber = null;
	private TimeStamp timeOfFirstUsage = null;
	private TimeStamp timeOfLastUsage = null;
	private CallDuration timeUsage = null;
	private ServiceConditionChange serviceConditionChange = null;
	private QoSInformation qoSInformationNeg = null;
	private GSNAddress servingNodeAddress = null;
	private BerInteger datavolumeFBCUplink = null;
	private BerInteger datavolumeFBCDownlink = null;
	private TimeStamp timeOfReport = null;
	private FailureHandlingContinue failureHandlingContinue = null;
	private BerInteger serviceIdentifier = null;
	private AFRecordInformation aFRecordInformation = null;
	private UserLocationInformation userLocationInformation = null;
	private BerInteger eventCounter = null;
	private BerInteger l7UpVolume = null;
	private BerInteger l7DownVolume = null;
	private BerInteger attemptCounter = null;
	private ServiceChargeType serviceChargeType = null;
	private ThreeGPP2UserLocationInformation threeGPP2UserLocationInformation = null;
	private BerOctetString sponsorIdentity = null;
	private BerOctetString applicationServiceProviderIdentity = null;
	private UWANUserLocationInfo uWANUserLocationInformation = null;
	private ServingPLMNRateControl servingPLMNRateControl = null;
	private APNRateControl aPNRateControl = null;
	private BerIA5String url = null;
	private ServiceConditionChangeEx serviceConditionChangeEx = null;
	
	public ChangeOfServiceCondition() {
	}

	public ChangeOfServiceCondition(byte[] code) {
		this.code = code;
	}

	public void setRatingGroup(RatingGroupId ratingGroup) {
		this.ratingGroup = ratingGroup;
	}

	public RatingGroupId getRatingGroup() {
		return ratingGroup;
	}

	public void setChargingRuleBaseName(ChargingRuleBaseName chargingRuleBaseName) {
		this.chargingRuleBaseName = chargingRuleBaseName;
	}

	public ChargingRuleBaseName getChargingRuleBaseName() {
		return chargingRuleBaseName;
	}

	public void setResultCode(ResultCode resultCode) {
		this.resultCode = resultCode;
	}

	public ResultCode getResultCode() {
		return resultCode;
	}

	public void setLocalSequenceNumber(BerInteger localSequenceNumber) {
		this.localSequenceNumber = localSequenceNumber;
	}

	public BerInteger getLocalSequenceNumber() {
		return localSequenceNumber;
	}

	public void setTimeOfFirstUsage(TimeStamp timeOfFirstUsage) {
		this.timeOfFirstUsage = timeOfFirstUsage;
	}

	public TimeStamp getTimeOfFirstUsage() {
		return timeOfFirstUsage;
	}

	public void setTimeOfLastUsage(TimeStamp timeOfLastUsage) {
		this.timeOfLastUsage = timeOfLastUsage;
	}

	public TimeStamp getTimeOfLastUsage() {
		return timeOfLastUsage;
	}

	public void setTimeUsage(CallDuration timeUsage) {
		this.timeUsage = timeUsage;
	}

	public CallDuration getTimeUsage() {
		return timeUsage;
	}

	public void setServiceConditionChange(ServiceConditionChange serviceConditionChange) {
		this.serviceConditionChange = serviceConditionChange;
	}

	public ServiceConditionChange getServiceConditionChange() {
		return serviceConditionChange;
	}

	public void setQoSInformationNeg(QoSInformation qoSInformationNeg) {
		this.qoSInformationNeg = qoSInformationNeg;
	}

	public QoSInformation getQoSInformationNeg() {
		return qoSInformationNeg;
	}

	public void setServingNodeAddress(GSNAddress servingNodeAddress) {
		this.servingNodeAddress = servingNodeAddress;
	}

	public GSNAddress getServingNodeAddress() {
		return servingNodeAddress;
	}

	public void setDatavolumeFBCUplink(BerInteger datavolumeFBCUplink) {
		this.datavolumeFBCUplink = datavolumeFBCUplink;
	}

	public BerInteger getDatavolumeFBCUplink() {
		return datavolumeFBCUplink;
	}

	public void setDatavolumeFBCDownlink(BerInteger datavolumeFBCDownlink) {
		this.datavolumeFBCDownlink = datavolumeFBCDownlink;
	}

	public BerInteger getDatavolumeFBCDownlink() {
		return datavolumeFBCDownlink;
	}

	public void setTimeOfReport(TimeStamp timeOfReport) {
		this.timeOfReport = timeOfReport;
	}

	public TimeStamp getTimeOfReport() {
		return timeOfReport;
	}

	public void setFailureHandlingContinue(FailureHandlingContinue failureHandlingContinue) {
		this.failureHandlingContinue = failureHandlingContinue;
	}

	public FailureHandlingContinue getFailureHandlingContinue() {
		return failureHandlingContinue;
	}

	public void setServiceIdentifier(BerInteger serviceIdentifier) {
		this.serviceIdentifier = serviceIdentifier;
	}

	public BerInteger getServiceIdentifier() {
		return serviceIdentifier;
	}

	public void setAFRecordInformation(AFRecordInformation aFRecordInformation) {
		this.aFRecordInformation = aFRecordInformation;
	}

	public AFRecordInformation getAFRecordInformation() {
		return aFRecordInformation;
	}

	public void setUserLocationInformation(UserLocationInformation userLocationInformation) {
		this.userLocationInformation = userLocationInformation;
	}

	public UserLocationInformation getUserLocationInformation() {
		return userLocationInformation;
	}

	public void setEventCounter(BerInteger eventCounter) {
		this.eventCounter = eventCounter;
	}

	public BerInteger getEventCounter() {
		return eventCounter;
	}

	public void setL7UpVolume(BerInteger l7UpVolume) {
		this.l7UpVolume = l7UpVolume;
	}

	public BerInteger getL7UpVolume() {
		return l7UpVolume;
	}

	public void setL7DownVolume(BerInteger l7DownVolume) {
		this.l7DownVolume = l7DownVolume;
	}

	public BerInteger getL7DownVolume() {
		return l7DownVolume;
	}

	public void setAttemptCounter(BerInteger attemptCounter) {
		this.attemptCounter = attemptCounter;
	}

	public BerInteger getAttemptCounter() {
		return attemptCounter;
	}

	public void setServiceChargeType(ServiceChargeType serviceChargeType) {
		this.serviceChargeType = serviceChargeType;
	}

	public ServiceChargeType getServiceChargeType() {
		return serviceChargeType;
	}

	public void setThreeGPP2UserLocationInformation(ThreeGPP2UserLocationInformation threeGPP2UserLocationInformation) {
		this.threeGPP2UserLocationInformation = threeGPP2UserLocationInformation;
	}

	public ThreeGPP2UserLocationInformation getThreeGPP2UserLocationInformation() {
		return threeGPP2UserLocationInformation;
	}

	public void setSponsorIdentity(BerOctetString sponsorIdentity) {
		this.sponsorIdentity = sponsorIdentity;
	}

	public BerOctetString getSponsorIdentity() {
		return sponsorIdentity;
	}

	public void setApplicationServiceProviderIdentity(BerOctetString applicationServiceProviderIdentity) {
		this.applicationServiceProviderIdentity = applicationServiceProviderIdentity;
	}

	public BerOctetString getApplicationServiceProviderIdentity() {
		return applicationServiceProviderIdentity;
	}

	public void setUWANUserLocationInformation(UWANUserLocationInfo uWANUserLocationInformation) {
		this.uWANUserLocationInformation = uWANUserLocationInformation;
	}

	public UWANUserLocationInfo getUWANUserLocationInformation() {
		return uWANUserLocationInformation;
	}

	public void setServingPLMNRateControl(ServingPLMNRateControl servingPLMNRateControl) {
		this.servingPLMNRateControl = servingPLMNRateControl;
	}

	public ServingPLMNRateControl getServingPLMNRateControl() {
		return servingPLMNRateControl;
	}

	public void setAPNRateControl(APNRateControl aPNRateControl) {
		this.aPNRateControl = aPNRateControl;
	}

	public APNRateControl getAPNRateControl() {
		return aPNRateControl;
	}

	public void setUrl(BerIA5String url) {
		this.url = url;
	}

	public BerIA5String getUrl() {
		return url;
	}

	public void setServiceConditionChangeEx(ServiceConditionChangeEx serviceConditionChangeEx) {
		this.serviceConditionChangeEx = serviceConditionChangeEx;
	}

	public ServiceConditionChangeEx getServiceConditionChangeEx() {
		return serviceConditionChangeEx;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (serviceConditionChangeEx != null) {
			codeLength += serviceConditionChangeEx.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 101
			reverseOS.write(0x65);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (url != null) {
			codeLength += url.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 100
			reverseOS.write(0x64);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (aPNRateControl != null) {
			codeLength += aPNRateControl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 36
			reverseOS.write(0x24);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (servingPLMNRateControl != null) {
			codeLength += servingPLMNRateControl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 35
			reverseOS.write(0x23);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (uWANUserLocationInformation != null) {
			codeLength += uWANUserLocationInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 32
			reverseOS.write(0x20);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (applicationServiceProviderIdentity != null) {
			codeLength += applicationServiceProviderIdentity.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 31
			reverseOS.write(0x1F);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (sponsorIdentity != null) {
			codeLength += sponsorIdentity.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 30
			reverseOS.write(0x9E);
			codeLength += 1;
		}
		
		if (threeGPP2UserLocationInformation != null) {
			codeLength += threeGPP2UserLocationInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 29
			reverseOS.write(0x9D);
			codeLength += 1;
		}
		
		if (serviceChargeType != null) {
			codeLength += serviceChargeType.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 28
			reverseOS.write(0x9C);
			codeLength += 1;
		}
		
		if (attemptCounter != null) {
			codeLength += attemptCounter.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 27
			reverseOS.write(0x9B);
			codeLength += 1;
		}
		
		if (l7DownVolume != null) {
			codeLength += l7DownVolume.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 26
			reverseOS.write(0x9A);
			codeLength += 1;
		}
		
		if (l7UpVolume != null) {
			codeLength += l7UpVolume.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 25
			reverseOS.write(0x99);
			codeLength += 1;
		}
		
		if (eventCounter != null) {
			codeLength += eventCounter.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 24
			reverseOS.write(0x98);
			codeLength += 1;
		}
		
		if (userLocationInformation != null) {
			codeLength += userLocationInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 20
			reverseOS.write(0x94);
			codeLength += 1;
		}
		
		if (aFRecordInformation != null) {
			codeLength += aFRecordInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 19
			reverseOS.write(0xB3);
			codeLength += 1;
		}
		
		if (serviceIdentifier != null) {
			codeLength += serviceIdentifier.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 17
			reverseOS.write(0x91);
			codeLength += 1;
		}
		
		if (failureHandlingContinue != null) {
			codeLength += failureHandlingContinue.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 16
			reverseOS.write(0x90);
			codeLength += 1;
		}
		
		if (timeOfReport != null) {
			codeLength += timeOfReport.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 14
			reverseOS.write(0x8E);
			codeLength += 1;
		}
		
		if (datavolumeFBCDownlink != null) {
			codeLength += datavolumeFBCDownlink.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 13
			reverseOS.write(0x8D);
			codeLength += 1;
		}
		
		if (datavolumeFBCUplink != null) {
			codeLength += datavolumeFBCUplink.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			reverseOS.write(0x8C);
			codeLength += 1;
		}
		
		if (servingNodeAddress != null) {
			sublength = servingNodeAddress.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			reverseOS.write(0xAA);
			codeLength += 1;
		}
		
		if (qoSInformationNeg != null) {
			sublength = qoSInformationNeg.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		if (serviceConditionChange != null) {
			codeLength += serviceConditionChange.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (timeUsage != null) {
			codeLength += timeUsage.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (timeOfLastUsage != null) {
			codeLength += timeOfLastUsage.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (timeOfFirstUsage != null) {
			codeLength += timeOfFirstUsage.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (localSequenceNumber != null) {
			codeLength += localSequenceNumber.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (resultCode != null) {
			codeLength += resultCode.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (chargingRuleBaseName != null) {
			codeLength += chargingRuleBaseName.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (ratingGroup != null) {
			codeLength += ratingGroup.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		if (totalLength == -1) {
			subCodeLength += berTag.decode(is);

			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				ratingGroup = new RatingGroupId();
				subCodeLength += ratingGroup.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				chargingRuleBaseName = new ChargingRuleBaseName();
				subCodeLength += chargingRuleBaseName.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				resultCode = new ResultCode();
				subCodeLength += resultCode.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				localSequenceNumber = new BerInteger();
				subCodeLength += localSequenceNumber.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				timeOfFirstUsage = new TimeStamp();
				subCodeLength += timeOfFirstUsage.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
				timeOfLastUsage = new TimeStamp();
				subCodeLength += timeOfLastUsage.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				timeUsage = new CallDuration();
				subCodeLength += timeUsage.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
				serviceConditionChange = new ServiceConditionChange();
				subCodeLength += serviceConditionChange.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
				subCodeLength += length.decode(is);
				qoSInformationNeg = new QoSInformation();
				int choiceDecodeLength = qoSInformationNeg.decode(is, null);
				if (choiceDecodeLength != 0) {
					subCodeLength += choiceDecodeLength;
					subCodeLength += berTag.decode(is);
				}
				else {
					qoSInformationNeg = null;
				}

			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
				subCodeLength += length.decode(is);
				servingNodeAddress = new GSNAddress();
				int choiceDecodeLength = servingNodeAddress.decode(is, null);
				if (choiceDecodeLength != 0) {
					subCodeLength += choiceDecodeLength;
					subCodeLength += berTag.decode(is);
				}
				else {
					servingNodeAddress = null;
				}

			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
				datavolumeFBCUplink = new BerInteger();
				subCodeLength += datavolumeFBCUplink.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
				datavolumeFBCDownlink = new BerInteger();
				subCodeLength += datavolumeFBCDownlink.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
				timeOfReport = new TimeStamp();
				subCodeLength += timeOfReport.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 16)) {
				failureHandlingContinue = new FailureHandlingContinue();
				subCodeLength += failureHandlingContinue.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 17)) {
				serviceIdentifier = new BerInteger();
				subCodeLength += serviceIdentifier.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
				aFRecordInformation = new AFRecordInformation();
				subCodeLength += aFRecordInformation.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 20)) {
				userLocationInformation = new UserLocationInformation();
				subCodeLength += userLocationInformation.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 24)) {
				eventCounter = new BerInteger();
				subCodeLength += eventCounter.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 25)) {
				l7UpVolume = new BerInteger();
				subCodeLength += l7UpVolume.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 26)) {
				l7DownVolume = new BerInteger();
				subCodeLength += l7DownVolume.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 27)) {
				attemptCounter = new BerInteger();
				subCodeLength += attemptCounter.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 28)) {
				serviceChargeType = new ServiceChargeType();
				subCodeLength += serviceChargeType.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 29)) {
				threeGPP2UserLocationInformation = new ThreeGPP2UserLocationInformation();
				subCodeLength += threeGPP2UserLocationInformation.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 30)) {
				sponsorIdentity = new BerOctetString();
				subCodeLength += sponsorIdentity.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 31)) {
				applicationServiceProviderIdentity = new BerOctetString();
				subCodeLength += applicationServiceProviderIdentity.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 32)) {
				uWANUserLocationInformation = new UWANUserLocationInfo();
				subCodeLength += uWANUserLocationInformation.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 35)) {
				servingPLMNRateControl = new ServingPLMNRateControl();
				subCodeLength += servingPLMNRateControl.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 36)) {
				aPNRateControl = new APNRateControl();
				subCodeLength += aPNRateControl.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 100)) {
				url = new BerIA5String();
				subCodeLength += url.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 101)) {
				serviceConditionChangeEx = new ServiceConditionChangeEx();
				subCodeLength += serviceConditionChangeEx.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			int nextByte = is.read();
			if (berTag.tagNumber != 0 || berTag.tagClass != 0 || berTag.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			ratingGroup = new RatingGroupId();
			subCodeLength += ratingGroup.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			chargingRuleBaseName = new ChargingRuleBaseName();
			subCodeLength += chargingRuleBaseName.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			resultCode = new ResultCode();
			subCodeLength += resultCode.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			localSequenceNumber = new BerInteger();
			subCodeLength += localSequenceNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			timeOfFirstUsage = new TimeStamp();
			subCodeLength += timeOfFirstUsage.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			timeOfLastUsage = new TimeStamp();
			subCodeLength += timeOfLastUsage.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			timeUsage = new CallDuration();
			subCodeLength += timeUsage.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			serviceConditionChange = new ServiceConditionChange();
			subCodeLength += serviceConditionChange.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			subCodeLength += length.decode(is);
			qoSInformationNeg = new QoSInformation();
			subCodeLength += qoSInformationNeg.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			subCodeLength += length.decode(is);
			servingNodeAddress = new GSNAddress();
			subCodeLength += servingNodeAddress.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
			datavolumeFBCUplink = new BerInteger();
			subCodeLength += datavolumeFBCUplink.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			datavolumeFBCDownlink = new BerInteger();
			subCodeLength += datavolumeFBCDownlink.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			timeOfReport = new TimeStamp();
			subCodeLength += timeOfReport.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 16)) {
			failureHandlingContinue = new FailureHandlingContinue();
			subCodeLength += failureHandlingContinue.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 17)) {
			serviceIdentifier = new BerInteger();
			subCodeLength += serviceIdentifier.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
			aFRecordInformation = new AFRecordInformation();
			subCodeLength += aFRecordInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 20)) {
			userLocationInformation = new UserLocationInformation();
			subCodeLength += userLocationInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 24)) {
			eventCounter = new BerInteger();
			subCodeLength += eventCounter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 25)) {
			l7UpVolume = new BerInteger();
			subCodeLength += l7UpVolume.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 26)) {
			l7DownVolume = new BerInteger();
			subCodeLength += l7DownVolume.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 27)) {
			attemptCounter = new BerInteger();
			subCodeLength += attemptCounter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 28)) {
			serviceChargeType = new ServiceChargeType();
			subCodeLength += serviceChargeType.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 29)) {
			threeGPP2UserLocationInformation = new ThreeGPP2UserLocationInformation();
			subCodeLength += threeGPP2UserLocationInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 30)) {
			sponsorIdentity = new BerOctetString();
			subCodeLength += sponsorIdentity.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 31)) {
			applicationServiceProviderIdentity = new BerOctetString();
			subCodeLength += applicationServiceProviderIdentity.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 32)) {
			uWANUserLocationInformation = new UWANUserLocationInfo();
			subCodeLength += uWANUserLocationInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 35)) {
			servingPLMNRateControl = new ServingPLMNRateControl();
			subCodeLength += servingPLMNRateControl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 36)) {
			aPNRateControl = new APNRateControl();
			subCodeLength += aPNRateControl.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 100)) {
			url = new BerIA5String();
			subCodeLength += url.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 101)) {
			serviceConditionChangeEx = new ServiceConditionChangeEx();
			subCodeLength += serviceConditionChangeEx.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (ratingGroup != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ratingGroup: ").append(ratingGroup);
			firstSelectedElement = false;
		}
		
		if (chargingRuleBaseName != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargingRuleBaseName: ").append(chargingRuleBaseName);
			firstSelectedElement = false;
		}
		
		if (resultCode != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("resultCode: ").append(resultCode);
			firstSelectedElement = false;
		}
		
		if (localSequenceNumber != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("localSequenceNumber: ").append(localSequenceNumber);
			firstSelectedElement = false;
		}
		
		if (timeOfFirstUsage != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("timeOfFirstUsage: ").append(timeOfFirstUsage);
			firstSelectedElement = false;
		}
		
		if (timeOfLastUsage != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("timeOfLastUsage: ").append(timeOfLastUsage);
			firstSelectedElement = false;
		}
		
		if (timeUsage != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("timeUsage: ").append(timeUsage);
			firstSelectedElement = false;
		}
		
		if (serviceConditionChange != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceConditionChange: ").append(serviceConditionChange);
			firstSelectedElement = false;
		}
		
		if (qoSInformationNeg != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("qoSInformationNeg: ");
			qoSInformationNeg.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (servingNodeAddress != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servingNodeAddress: ");
			servingNodeAddress.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (datavolumeFBCUplink != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("datavolumeFBCUplink: ").append(datavolumeFBCUplink);
			firstSelectedElement = false;
		}
		
		if (datavolumeFBCDownlink != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("datavolumeFBCDownlink: ").append(datavolumeFBCDownlink);
			firstSelectedElement = false;
		}
		
		if (timeOfReport != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("timeOfReport: ").append(timeOfReport);
			firstSelectedElement = false;
		}
		
		if (failureHandlingContinue != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("failureHandlingContinue: ").append(failureHandlingContinue);
			firstSelectedElement = false;
		}
		
		if (serviceIdentifier != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceIdentifier: ").append(serviceIdentifier);
			firstSelectedElement = false;
		}
		
		if (aFRecordInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("aFRecordInformation: ");
			aFRecordInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (userLocationInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("userLocationInformation: ").append(userLocationInformation);
			firstSelectedElement = false;
		}
		
		if (eventCounter != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("eventCounter: ").append(eventCounter);
			firstSelectedElement = false;
		}
		
		if (l7UpVolume != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("l7UpVolume: ").append(l7UpVolume);
			firstSelectedElement = false;
		}
		
		if (l7DownVolume != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("l7DownVolume: ").append(l7DownVolume);
			firstSelectedElement = false;
		}
		
		if (attemptCounter != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("attemptCounter: ").append(attemptCounter);
			firstSelectedElement = false;
		}
		
		if (serviceChargeType != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceChargeType: ").append(serviceChargeType);
			firstSelectedElement = false;
		}
		
		if (threeGPP2UserLocationInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("threeGPP2UserLocationInformation: ").append(threeGPP2UserLocationInformation);
			firstSelectedElement = false;
		}
		
		if (sponsorIdentity != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sponsorIdentity: ").append(sponsorIdentity);
			firstSelectedElement = false;
		}
		
		if (applicationServiceProviderIdentity != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("applicationServiceProviderIdentity: ").append(applicationServiceProviderIdentity);
			firstSelectedElement = false;
		}
		
		if (uWANUserLocationInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("uWANUserLocationInformation: ");
			uWANUserLocationInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (servingPLMNRateControl != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servingPLMNRateControl: ");
			servingPLMNRateControl.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (aPNRateControl != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("aPNRateControl: ");
			aPNRateControl.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (url != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("url: ").append(url);
			firstSelectedElement = false;
		}
		
		if (serviceConditionChangeEx != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceConditionChangeEx: ").append(serviceConditionChangeEx);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

