/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package com.bd.asn.zte.data.pgw_r8_new;

import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import java.io.*;


public class MBMSInformation implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 17);

	public byte[] code = null;
	private TMGI tMGI = null;
	private MBMSSessionIdentity mBMSSessionIdentity = null;
	private MBMSServiceType mBMSServiceType = null;
	private MBMSUserServiceType mBMSUserServiceType = null;
	private MBMS2G3GIndicator mBMS2G3GIndicator = null;
	private BerBoolean fileRepairSupported = null;
	private RoutingAreaCode rAI = null;
	private MBMSServiceArea mBMSServiceArea = null;
	private RequiredMBMSBearerCapabilities requiredMBMSBearerCaps = null;
	private GSNAddress mBMSGWAddress = null;
	private CNIPMulticastDistribution cNIPMulticastDistribution = null;
	private MBMSAccessIndicator mBMSAccessIndicator = null;
	
	public MBMSInformation() {
	}

	public MBMSInformation(byte[] code) {
		this.code = code;
	}

	public void setTMGI(TMGI tMGI) {
		this.tMGI = tMGI;
	}

	public TMGI getTMGI() {
		return tMGI;
	}

	public void setMBMSSessionIdentity(MBMSSessionIdentity mBMSSessionIdentity) {
		this.mBMSSessionIdentity = mBMSSessionIdentity;
	}

	public MBMSSessionIdentity getMBMSSessionIdentity() {
		return mBMSSessionIdentity;
	}

	public void setMBMSServiceType(MBMSServiceType mBMSServiceType) {
		this.mBMSServiceType = mBMSServiceType;
	}

	public MBMSServiceType getMBMSServiceType() {
		return mBMSServiceType;
	}

	public void setMBMSUserServiceType(MBMSUserServiceType mBMSUserServiceType) {
		this.mBMSUserServiceType = mBMSUserServiceType;
	}

	public MBMSUserServiceType getMBMSUserServiceType() {
		return mBMSUserServiceType;
	}

	public void setMBMS2G3GIndicator(MBMS2G3GIndicator mBMS2G3GIndicator) {
		this.mBMS2G3GIndicator = mBMS2G3GIndicator;
	}

	public MBMS2G3GIndicator getMBMS2G3GIndicator() {
		return mBMS2G3GIndicator;
	}

	public void setFileRepairSupported(BerBoolean fileRepairSupported) {
		this.fileRepairSupported = fileRepairSupported;
	}

	public BerBoolean getFileRepairSupported() {
		return fileRepairSupported;
	}

	public void setRAI(RoutingAreaCode rAI) {
		this.rAI = rAI;
	}

	public RoutingAreaCode getRAI() {
		return rAI;
	}

	public void setMBMSServiceArea(MBMSServiceArea mBMSServiceArea) {
		this.mBMSServiceArea = mBMSServiceArea;
	}

	public MBMSServiceArea getMBMSServiceArea() {
		return mBMSServiceArea;
	}

	public void setRequiredMBMSBearerCaps(RequiredMBMSBearerCapabilities requiredMBMSBearerCaps) {
		this.requiredMBMSBearerCaps = requiredMBMSBearerCaps;
	}

	public RequiredMBMSBearerCapabilities getRequiredMBMSBearerCaps() {
		return requiredMBMSBearerCaps;
	}

	public void setMBMSGWAddress(GSNAddress mBMSGWAddress) {
		this.mBMSGWAddress = mBMSGWAddress;
	}

	public GSNAddress getMBMSGWAddress() {
		return mBMSGWAddress;
	}

	public void setCNIPMulticastDistribution(CNIPMulticastDistribution cNIPMulticastDistribution) {
		this.cNIPMulticastDistribution = cNIPMulticastDistribution;
	}

	public CNIPMulticastDistribution getCNIPMulticastDistribution() {
		return cNIPMulticastDistribution;
	}

	public void setMBMSAccessIndicator(MBMSAccessIndicator mBMSAccessIndicator) {
		this.mBMSAccessIndicator = mBMSAccessIndicator;
	}

	public MBMSAccessIndicator getMBMSAccessIndicator() {
		return mBMSAccessIndicator;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (mBMSAccessIndicator != null) {
			codeLength += mBMSAccessIndicator.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			reverseOS.write(0x8C);
			codeLength += 1;
		}
		
		if (cNIPMulticastDistribution != null) {
			codeLength += cNIPMulticastDistribution.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			reverseOS.write(0x8B);
			codeLength += 1;
		}
		
		if (mBMSGWAddress != null) {
			sublength = mBMSGWAddress.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			reverseOS.write(0xAA);
			codeLength += 1;
		}
		
		if (requiredMBMSBearerCaps != null) {
			codeLength += requiredMBMSBearerCaps.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			reverseOS.write(0x89);
			codeLength += 1;
		}
		
		if (mBMSServiceArea != null) {
			codeLength += mBMSServiceArea.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (rAI != null) {
			codeLength += rAI.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (fileRepairSupported != null) {
			codeLength += fileRepairSupported.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (mBMS2G3GIndicator != null) {
			codeLength += mBMS2G3GIndicator.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (mBMSUserServiceType != null) {
			codeLength += mBMSUserServiceType.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (mBMSServiceType != null) {
			codeLength += mBMSServiceType.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (mBMSSessionIdentity != null) {
			codeLength += mBMSSessionIdentity.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (tMGI != null) {
			codeLength += tMGI.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		if (totalLength == -1) {
			subCodeLength += berTag.decode(is);

			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				tMGI = new TMGI();
				subCodeLength += tMGI.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				mBMSSessionIdentity = new MBMSSessionIdentity();
				subCodeLength += mBMSSessionIdentity.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				mBMSServiceType = new MBMSServiceType();
				subCodeLength += mBMSServiceType.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				mBMSUserServiceType = new MBMSUserServiceType();
				subCodeLength += mBMSUserServiceType.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				mBMS2G3GIndicator = new MBMS2G3GIndicator();
				subCodeLength += mBMS2G3GIndicator.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
				fileRepairSupported = new BerBoolean();
				subCodeLength += fileRepairSupported.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				rAI = new RoutingAreaCode();
				subCodeLength += rAI.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
				mBMSServiceArea = new MBMSServiceArea();
				subCodeLength += mBMSServiceArea.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
				requiredMBMSBearerCaps = new RequiredMBMSBearerCapabilities();
				subCodeLength += requiredMBMSBearerCaps.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
				subCodeLength += length.decode(is);
				mBMSGWAddress = new GSNAddress();
				int choiceDecodeLength = mBMSGWAddress.decode(is, null);
				if (choiceDecodeLength != 0) {
					subCodeLength += choiceDecodeLength;
					subCodeLength += berTag.decode(is);
				}
				else {
					mBMSGWAddress = null;
				}

			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
				cNIPMulticastDistribution = new CNIPMulticastDistribution();
				subCodeLength += cNIPMulticastDistribution.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
				mBMSAccessIndicator = new MBMSAccessIndicator();
				subCodeLength += mBMSAccessIndicator.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			int nextByte = is.read();
			if (berTag.tagNumber != 0 || berTag.tagClass != 0 || berTag.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		while (subCodeLength < totalLength) {
			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				tMGI = new TMGI();
				subCodeLength += tMGI.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				mBMSSessionIdentity = new MBMSSessionIdentity();
				subCodeLength += mBMSSessionIdentity.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				mBMSServiceType = new MBMSServiceType();
				subCodeLength += mBMSServiceType.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				mBMSUserServiceType = new MBMSUserServiceType();
				subCodeLength += mBMSUserServiceType.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				mBMS2G3GIndicator = new MBMS2G3GIndicator();
				subCodeLength += mBMS2G3GIndicator.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
				fileRepairSupported = new BerBoolean();
				subCodeLength += fileRepairSupported.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				rAI = new RoutingAreaCode();
				subCodeLength += rAI.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
				mBMSServiceArea = new MBMSServiceArea();
				subCodeLength += mBMSServiceArea.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
				requiredMBMSBearerCaps = new RequiredMBMSBearerCapabilities();
				subCodeLength += requiredMBMSBearerCaps.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
				subCodeLength += new BerLength().decode(is);
				mBMSGWAddress = new GSNAddress();
				subCodeLength += mBMSGWAddress.decode(is, null);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
				cNIPMulticastDistribution = new CNIPMulticastDistribution();
				subCodeLength += cNIPMulticastDistribution.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
				mBMSAccessIndicator = new MBMSAccessIndicator();
				subCodeLength += mBMSAccessIndicator.decode(is, false);
			}
		}
		if (subCodeLength != totalLength) {
			throw new IOException("Length of set does not match length tag, length tag: " + totalLength + ", actual set length: " + subCodeLength);

		}
		codeLength += subCodeLength;

		return codeLength;
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (tMGI != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("tMGI: ").append(tMGI);
			firstSelectedElement = false;
		}
		
		if (mBMSSessionIdentity != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mBMSSessionIdentity: ").append(mBMSSessionIdentity);
			firstSelectedElement = false;
		}
		
		if (mBMSServiceType != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mBMSServiceType: ").append(mBMSServiceType);
			firstSelectedElement = false;
		}
		
		if (mBMSUserServiceType != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mBMSUserServiceType: ").append(mBMSUserServiceType);
			firstSelectedElement = false;
		}
		
		if (mBMS2G3GIndicator != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mBMS2G3GIndicator: ").append(mBMS2G3GIndicator);
			firstSelectedElement = false;
		}
		
		if (fileRepairSupported != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("fileRepairSupported: ").append(fileRepairSupported);
			firstSelectedElement = false;
		}
		
		if (rAI != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rAI: ").append(rAI);
			firstSelectedElement = false;
		}
		
		if (mBMSServiceArea != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mBMSServiceArea: ").append(mBMSServiceArea);
			firstSelectedElement = false;
		}
		
		if (requiredMBMSBearerCaps != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("requiredMBMSBearerCaps: ").append(requiredMBMSBearerCaps);
			firstSelectedElement = false;
		}
		
		if (mBMSGWAddress != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mBMSGWAddress: ");
			mBMSGWAddress.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (cNIPMulticastDistribution != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cNIPMulticastDistribution: ").append(cNIPMulticastDistribution);
			firstSelectedElement = false;
		}
		
		if (mBMSAccessIndicator != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mBMSAccessIndicator: ").append(mBMSAccessIndicator);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

