/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package com.bd.asn.zte.data.pgw_r8_new;

import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;


public class QoSInformation implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	private GSMQoSInformation gsmQosInformation = null;
	private UmtsQosInformation umtsQosInformation = null;
	private EPCQoSInformation ePCQoSInformation = null;
	
	public QoSInformation() {
	}

	public QoSInformation(byte[] code) {
		this.code = code;
	}

	public void setGsmQosInformation(GSMQoSInformation gsmQosInformation) {
		this.gsmQosInformation = gsmQosInformation;
	}

	public GSMQoSInformation getGsmQosInformation() {
		return gsmQosInformation;
	}

	public void setUmtsQosInformation(UmtsQosInformation umtsQosInformation) {
		this.umtsQosInformation = umtsQosInformation;
	}

	public UmtsQosInformation getUmtsQosInformation() {
		return umtsQosInformation;
	}

	public void setEPCQoSInformation(EPCQoSInformation ePCQoSInformation) {
		this.ePCQoSInformation = ePCQoSInformation;
	}

	public EPCQoSInformation getEPCQoSInformation() {
		return ePCQoSInformation;
	}

	public int encode(OutputStream reverseOS) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (ePCQoSInformation != null) {
			codeLength += ePCQoSInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
			return codeLength;
		}
		
		if (umtsQosInformation != null) {
			codeLength += umtsQosInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			return codeLength;
		}
		
		if (gsmQosInformation != null) {
			codeLength += gsmQosInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			reverseOS.write(0xA0);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			gsmQosInformation = new GSMQoSInformation();
			codeLength += gsmQosInformation.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			umtsQosInformation = new UmtsQosInformation();
			codeLength += umtsQosInformation.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			ePCQoSInformation = new EPCQoSInformation();
			codeLength += ePCQoSInformation.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (gsmQosInformation != null) {
			sb.append("gsmQosInformation: ");
			gsmQosInformation.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (umtsQosInformation != null) {
			sb.append("umtsQosInformation: ").append(umtsQosInformation);
			return;
		}

		if (ePCQoSInformation != null) {
			sb.append("ePCQoSInformation: ");
			ePCQoSInformation.appendAsString(sb, indentLevel + 1);
			return;
		}

		sb.append("<none>");
	}

}

