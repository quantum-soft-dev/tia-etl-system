/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package com.bd.asn.zte.data.pgw_r8_new;

import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import java.io.*;


public class CAMELInformationPDP implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 17);

	public byte[] code = null;
	private SCFAddress sCFAddress = null;
	private ServiceKey serviceKey = null;
	private DefaultGPRSHandling defaultTransactionHandling = null;
	private CAMELAccessPointNameNI cAMELAccessPointNameNI = null;
	private CAMELAccessPointNameOI cAMELAccessPointNameOI = null;
	private NumberOfDPEncountered numberOfDPEncountered = null;
	private LevelOfCAMELService levelOfCAMELService = null;
	private FreeFormatData freeFormatData = null;
	private FFDAppendIndicator fFDAppendIndicator = null;
	
	public CAMELInformationPDP() {
	}

	public CAMELInformationPDP(byte[] code) {
		this.code = code;
	}

	public void setSCFAddress(SCFAddress sCFAddress) {
		this.sCFAddress = sCFAddress;
	}

	public SCFAddress getSCFAddress() {
		return sCFAddress;
	}

	public void setServiceKey(ServiceKey serviceKey) {
		this.serviceKey = serviceKey;
	}

	public ServiceKey getServiceKey() {
		return serviceKey;
	}

	public void setDefaultTransactionHandling(DefaultGPRSHandling defaultTransactionHandling) {
		this.defaultTransactionHandling = defaultTransactionHandling;
	}

	public DefaultGPRSHandling getDefaultTransactionHandling() {
		return defaultTransactionHandling;
	}

	public void setCAMELAccessPointNameNI(CAMELAccessPointNameNI cAMELAccessPointNameNI) {
		this.cAMELAccessPointNameNI = cAMELAccessPointNameNI;
	}

	public CAMELAccessPointNameNI getCAMELAccessPointNameNI() {
		return cAMELAccessPointNameNI;
	}

	public void setCAMELAccessPointNameOI(CAMELAccessPointNameOI cAMELAccessPointNameOI) {
		this.cAMELAccessPointNameOI = cAMELAccessPointNameOI;
	}

	public CAMELAccessPointNameOI getCAMELAccessPointNameOI() {
		return cAMELAccessPointNameOI;
	}

	public void setNumberOfDPEncountered(NumberOfDPEncountered numberOfDPEncountered) {
		this.numberOfDPEncountered = numberOfDPEncountered;
	}

	public NumberOfDPEncountered getNumberOfDPEncountered() {
		return numberOfDPEncountered;
	}

	public void setLevelOfCAMELService(LevelOfCAMELService levelOfCAMELService) {
		this.levelOfCAMELService = levelOfCAMELService;
	}

	public LevelOfCAMELService getLevelOfCAMELService() {
		return levelOfCAMELService;
	}

	public void setFreeFormatData(FreeFormatData freeFormatData) {
		this.freeFormatData = freeFormatData;
	}

	public FreeFormatData getFreeFormatData() {
		return freeFormatData;
	}

	public void setFFDAppendIndicator(FFDAppendIndicator fFDAppendIndicator) {
		this.fFDAppendIndicator = fFDAppendIndicator;
	}

	public FFDAppendIndicator getFFDAppendIndicator() {
		return fFDAppendIndicator;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (fFDAppendIndicator != null) {
			codeLength += fFDAppendIndicator.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			reverseOS.write(0x89);
			codeLength += 1;
		}
		
		if (freeFormatData != null) {
			codeLength += freeFormatData.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (levelOfCAMELService != null) {
			codeLength += levelOfCAMELService.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (numberOfDPEncountered != null) {
			codeLength += numberOfDPEncountered.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (cAMELAccessPointNameOI != null) {
			codeLength += cAMELAccessPointNameOI.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (cAMELAccessPointNameNI != null) {
			codeLength += cAMELAccessPointNameNI.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (defaultTransactionHandling != null) {
			codeLength += defaultTransactionHandling.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (serviceKey != null) {
			codeLength += serviceKey.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (sCFAddress != null) {
			codeLength += sCFAddress.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		if (totalLength == -1) {
			subCodeLength += berTag.decode(is);

			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				sCFAddress = new SCFAddress();
				subCodeLength += sCFAddress.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				serviceKey = new ServiceKey();
				subCodeLength += serviceKey.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				defaultTransactionHandling = new DefaultGPRSHandling();
				subCodeLength += defaultTransactionHandling.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				cAMELAccessPointNameNI = new CAMELAccessPointNameNI();
				subCodeLength += cAMELAccessPointNameNI.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				cAMELAccessPointNameOI = new CAMELAccessPointNameOI();
				subCodeLength += cAMELAccessPointNameOI.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
				numberOfDPEncountered = new NumberOfDPEncountered();
				subCodeLength += numberOfDPEncountered.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				levelOfCAMELService = new LevelOfCAMELService();
				subCodeLength += levelOfCAMELService.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
				freeFormatData = new FreeFormatData();
				subCodeLength += freeFormatData.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
				fFDAppendIndicator = new FFDAppendIndicator();
				subCodeLength += fFDAppendIndicator.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			int nextByte = is.read();
			if (berTag.tagNumber != 0 || berTag.tagClass != 0 || berTag.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		while (subCodeLength < totalLength) {
			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				sCFAddress = new SCFAddress();
				subCodeLength += sCFAddress.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				serviceKey = new ServiceKey();
				subCodeLength += serviceKey.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				defaultTransactionHandling = new DefaultGPRSHandling();
				subCodeLength += defaultTransactionHandling.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				cAMELAccessPointNameNI = new CAMELAccessPointNameNI();
				subCodeLength += cAMELAccessPointNameNI.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				cAMELAccessPointNameOI = new CAMELAccessPointNameOI();
				subCodeLength += cAMELAccessPointNameOI.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
				numberOfDPEncountered = new NumberOfDPEncountered();
				subCodeLength += numberOfDPEncountered.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				levelOfCAMELService = new LevelOfCAMELService();
				subCodeLength += levelOfCAMELService.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
				freeFormatData = new FreeFormatData();
				subCodeLength += freeFormatData.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
				fFDAppendIndicator = new FFDAppendIndicator();
				subCodeLength += fFDAppendIndicator.decode(is, false);
			}
		}
		if (subCodeLength != totalLength) {
			throw new IOException("Length of set does not match length tag, length tag: " + totalLength + ", actual set length: " + subCodeLength);

		}
		codeLength += subCodeLength;

		return codeLength;
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (sCFAddress != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sCFAddress: ").append(sCFAddress);
			firstSelectedElement = false;
		}
		
		if (serviceKey != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceKey: ").append(serviceKey);
			firstSelectedElement = false;
		}
		
		if (defaultTransactionHandling != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("defaultTransactionHandling: ").append(defaultTransactionHandling);
			firstSelectedElement = false;
		}
		
		if (cAMELAccessPointNameNI != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cAMELAccessPointNameNI: ").append(cAMELAccessPointNameNI);
			firstSelectedElement = false;
		}
		
		if (cAMELAccessPointNameOI != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cAMELAccessPointNameOI: ").append(cAMELAccessPointNameOI);
			firstSelectedElement = false;
		}
		
		if (numberOfDPEncountered != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("numberOfDPEncountered: ").append(numberOfDPEncountered);
			firstSelectedElement = false;
		}
		
		if (levelOfCAMELService != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("levelOfCAMELService: ").append(levelOfCAMELService);
			firstSelectedElement = false;
		}
		
		if (freeFormatData != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("freeFormatData: ").append(freeFormatData);
			firstSelectedElement = false;
		}
		
		if (fFDAppendIndicator != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("fFDAppendIndicator: ").append(fFDAppendIndicator);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

