/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package com.bd.asn.zte.data.pgw_r8_new;

import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import java.io.*;


public class EPCQoSInformation implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerInteger qCI = null;
	private BerInteger maxRequestedBandwithUL = null;
	private BerInteger maxRequestedBandwithDL = null;
	private BerInteger guaranteedBitrateUL = null;
	private BerInteger guaranteedBitrateDL = null;
	private BerInteger aRP = null;
	private BerInteger aPNAggregateMaxBitrateUL = null;
	private BerInteger aPNAggregateMaxBitrateDL = null;
	private BerInteger extendedMaxRequestedBWUL = null;
	private BerInteger extendedMaxRequestedBWDL = null;
	private BerInteger extendedGBRUL = null;
	private BerInteger extendedGBRDL = null;
	private BerInteger extendedAPNAMBRUL = null;
	private BerInteger extendedAPNAMBRDL = null;
	
	public EPCQoSInformation() {
	}

	public EPCQoSInformation(byte[] code) {
		this.code = code;
	}

	public void setQCI(BerInteger qCI) {
		this.qCI = qCI;
	}

	public BerInteger getQCI() {
		return qCI;
	}

	public void setMaxRequestedBandwithUL(BerInteger maxRequestedBandwithUL) {
		this.maxRequestedBandwithUL = maxRequestedBandwithUL;
	}

	public BerInteger getMaxRequestedBandwithUL() {
		return maxRequestedBandwithUL;
	}

	public void setMaxRequestedBandwithDL(BerInteger maxRequestedBandwithDL) {
		this.maxRequestedBandwithDL = maxRequestedBandwithDL;
	}

	public BerInteger getMaxRequestedBandwithDL() {
		return maxRequestedBandwithDL;
	}

	public void setGuaranteedBitrateUL(BerInteger guaranteedBitrateUL) {
		this.guaranteedBitrateUL = guaranteedBitrateUL;
	}

	public BerInteger getGuaranteedBitrateUL() {
		return guaranteedBitrateUL;
	}

	public void setGuaranteedBitrateDL(BerInteger guaranteedBitrateDL) {
		this.guaranteedBitrateDL = guaranteedBitrateDL;
	}

	public BerInteger getGuaranteedBitrateDL() {
		return guaranteedBitrateDL;
	}

	public void setARP(BerInteger aRP) {
		this.aRP = aRP;
	}

	public BerInteger getARP() {
		return aRP;
	}

	public void setAPNAggregateMaxBitrateUL(BerInteger aPNAggregateMaxBitrateUL) {
		this.aPNAggregateMaxBitrateUL = aPNAggregateMaxBitrateUL;
	}

	public BerInteger getAPNAggregateMaxBitrateUL() {
		return aPNAggregateMaxBitrateUL;
	}

	public void setAPNAggregateMaxBitrateDL(BerInteger aPNAggregateMaxBitrateDL) {
		this.aPNAggregateMaxBitrateDL = aPNAggregateMaxBitrateDL;
	}

	public BerInteger getAPNAggregateMaxBitrateDL() {
		return aPNAggregateMaxBitrateDL;
	}

	public void setExtendedMaxRequestedBWUL(BerInteger extendedMaxRequestedBWUL) {
		this.extendedMaxRequestedBWUL = extendedMaxRequestedBWUL;
	}

	public BerInteger getExtendedMaxRequestedBWUL() {
		return extendedMaxRequestedBWUL;
	}

	public void setExtendedMaxRequestedBWDL(BerInteger extendedMaxRequestedBWDL) {
		this.extendedMaxRequestedBWDL = extendedMaxRequestedBWDL;
	}

	public BerInteger getExtendedMaxRequestedBWDL() {
		return extendedMaxRequestedBWDL;
	}

	public void setExtendedGBRUL(BerInteger extendedGBRUL) {
		this.extendedGBRUL = extendedGBRUL;
	}

	public BerInteger getExtendedGBRUL() {
		return extendedGBRUL;
	}

	public void setExtendedGBRDL(BerInteger extendedGBRDL) {
		this.extendedGBRDL = extendedGBRDL;
	}

	public BerInteger getExtendedGBRDL() {
		return extendedGBRDL;
	}

	public void setExtendedAPNAMBRUL(BerInteger extendedAPNAMBRUL) {
		this.extendedAPNAMBRUL = extendedAPNAMBRUL;
	}

	public BerInteger getExtendedAPNAMBRUL() {
		return extendedAPNAMBRUL;
	}

	public void setExtendedAPNAMBRDL(BerInteger extendedAPNAMBRDL) {
		this.extendedAPNAMBRDL = extendedAPNAMBRDL;
	}

	public BerInteger getExtendedAPNAMBRDL() {
		return extendedAPNAMBRDL;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (extendedAPNAMBRDL != null) {
			codeLength += extendedAPNAMBRDL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 14
			reverseOS.write(0x8E);
			codeLength += 1;
		}
		
		if (extendedAPNAMBRUL != null) {
			codeLength += extendedAPNAMBRUL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 13
			reverseOS.write(0x8D);
			codeLength += 1;
		}
		
		if (extendedGBRDL != null) {
			codeLength += extendedGBRDL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			reverseOS.write(0x8C);
			codeLength += 1;
		}
		
		if (extendedGBRUL != null) {
			codeLength += extendedGBRUL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			reverseOS.write(0x8B);
			codeLength += 1;
		}
		
		if (extendedMaxRequestedBWDL != null) {
			codeLength += extendedMaxRequestedBWDL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 10
			reverseOS.write(0x8A);
			codeLength += 1;
		}
		
		if (extendedMaxRequestedBWUL != null) {
			codeLength += extendedMaxRequestedBWUL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			reverseOS.write(0x89);
			codeLength += 1;
		}
		
		if (aPNAggregateMaxBitrateDL != null) {
			codeLength += aPNAggregateMaxBitrateDL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (aPNAggregateMaxBitrateUL != null) {
			codeLength += aPNAggregateMaxBitrateUL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (aRP != null) {
			codeLength += aRP.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (guaranteedBitrateDL != null) {
			codeLength += guaranteedBitrateDL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (guaranteedBitrateUL != null) {
			codeLength += guaranteedBitrateUL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (maxRequestedBandwithDL != null) {
			codeLength += maxRequestedBandwithDL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (maxRequestedBandwithUL != null) {
			codeLength += maxRequestedBandwithUL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (qCI != null) {
			codeLength += qCI.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		if (totalLength == -1) {
			subCodeLength += berTag.decode(is);

			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				qCI = new BerInteger();
				subCodeLength += qCI.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				maxRequestedBandwithUL = new BerInteger();
				subCodeLength += maxRequestedBandwithUL.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				maxRequestedBandwithDL = new BerInteger();
				subCodeLength += maxRequestedBandwithDL.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				guaranteedBitrateUL = new BerInteger();
				subCodeLength += guaranteedBitrateUL.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				guaranteedBitrateDL = new BerInteger();
				subCodeLength += guaranteedBitrateDL.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
				aRP = new BerInteger();
				subCodeLength += aRP.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				aPNAggregateMaxBitrateUL = new BerInteger();
				subCodeLength += aPNAggregateMaxBitrateUL.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
				aPNAggregateMaxBitrateDL = new BerInteger();
				subCodeLength += aPNAggregateMaxBitrateDL.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
				extendedMaxRequestedBWUL = new BerInteger();
				subCodeLength += extendedMaxRequestedBWUL.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
				extendedMaxRequestedBWDL = new BerInteger();
				subCodeLength += extendedMaxRequestedBWDL.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
				extendedGBRUL = new BerInteger();
				subCodeLength += extendedGBRUL.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
				extendedGBRDL = new BerInteger();
				subCodeLength += extendedGBRDL.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
				extendedAPNAMBRUL = new BerInteger();
				subCodeLength += extendedAPNAMBRUL.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
				extendedAPNAMBRDL = new BerInteger();
				subCodeLength += extendedAPNAMBRDL.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			int nextByte = is.read();
			if (berTag.tagNumber != 0 || berTag.tagClass != 0 || berTag.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			qCI = new BerInteger();
			subCodeLength += qCI.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			maxRequestedBandwithUL = new BerInteger();
			subCodeLength += maxRequestedBandwithUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			maxRequestedBandwithDL = new BerInteger();
			subCodeLength += maxRequestedBandwithDL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			guaranteedBitrateUL = new BerInteger();
			subCodeLength += guaranteedBitrateUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			guaranteedBitrateDL = new BerInteger();
			subCodeLength += guaranteedBitrateDL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			aRP = new BerInteger();
			subCodeLength += aRP.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			aPNAggregateMaxBitrateUL = new BerInteger();
			subCodeLength += aPNAggregateMaxBitrateUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			aPNAggregateMaxBitrateDL = new BerInteger();
			subCodeLength += aPNAggregateMaxBitrateDL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			extendedMaxRequestedBWUL = new BerInteger();
			subCodeLength += extendedMaxRequestedBWUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
			extendedMaxRequestedBWDL = new BerInteger();
			subCodeLength += extendedMaxRequestedBWDL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
			extendedGBRUL = new BerInteger();
			subCodeLength += extendedGBRUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
			extendedGBRDL = new BerInteger();
			subCodeLength += extendedGBRDL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			extendedAPNAMBRUL = new BerInteger();
			subCodeLength += extendedAPNAMBRUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			extendedAPNAMBRDL = new BerInteger();
			subCodeLength += extendedAPNAMBRDL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (qCI != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("qCI: ").append(qCI);
			firstSelectedElement = false;
		}
		
		if (maxRequestedBandwithUL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxRequestedBandwithUL: ").append(maxRequestedBandwithUL);
			firstSelectedElement = false;
		}
		
		if (maxRequestedBandwithDL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxRequestedBandwithDL: ").append(maxRequestedBandwithDL);
			firstSelectedElement = false;
		}
		
		if (guaranteedBitrateUL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("guaranteedBitrateUL: ").append(guaranteedBitrateUL);
			firstSelectedElement = false;
		}
		
		if (guaranteedBitrateDL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("guaranteedBitrateDL: ").append(guaranteedBitrateDL);
			firstSelectedElement = false;
		}
		
		if (aRP != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("aRP: ").append(aRP);
			firstSelectedElement = false;
		}
		
		if (aPNAggregateMaxBitrateUL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("aPNAggregateMaxBitrateUL: ").append(aPNAggregateMaxBitrateUL);
			firstSelectedElement = false;
		}
		
		if (aPNAggregateMaxBitrateDL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("aPNAggregateMaxBitrateDL: ").append(aPNAggregateMaxBitrateDL);
			firstSelectedElement = false;
		}
		
		if (extendedMaxRequestedBWUL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("extendedMaxRequestedBWUL: ").append(extendedMaxRequestedBWUL);
			firstSelectedElement = false;
		}
		
		if (extendedMaxRequestedBWDL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("extendedMaxRequestedBWDL: ").append(extendedMaxRequestedBWDL);
			firstSelectedElement = false;
		}
		
		if (extendedGBRUL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("extendedGBRUL: ").append(extendedGBRUL);
			firstSelectedElement = false;
		}
		
		if (extendedGBRDL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("extendedGBRDL: ").append(extendedGBRDL);
			firstSelectedElement = false;
		}
		
		if (extendedAPNAMBRUL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("extendedAPNAMBRUL: ").append(extendedAPNAMBRUL);
			firstSelectedElement = false;
		}
		
		if (extendedAPNAMBRDL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("extendedAPNAMBRDL: ").append(extendedAPNAMBRDL);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

