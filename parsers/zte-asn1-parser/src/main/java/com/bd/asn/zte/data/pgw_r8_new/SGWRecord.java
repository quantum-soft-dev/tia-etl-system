/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package com.bd.asn.zte.data.pgw_r8_new;

import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import java.io.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


public class SGWRecord implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class SGWAddress implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<GSNAddress> seqOf = null;

		public SGWAddress() {
			seqOf = new ArrayList<GSNAddress>();
		}

		public SGWAddress(byte[] code) {
			this.code = code;
		}

		public List<GSNAddress> getGSNAddress() {
			if (seqOf == null) {
				seqOf = new ArrayList<GSNAddress>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			if (length.val == -1) {
				while (true) {
					subCodeLength += berTag.decode(is);

					if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
						int nextByte = is.read();
						if (nextByte != 0) {
							if (nextByte == -1) {
								throw new EOFException("Unexpected end of input stream.");
							}
							throw new IOException("Decoded sequence has wrong end of contents octets");
						}
						codeLength += subCodeLength + 1;
						return codeLength;
					}

					GSNAddress element = new GSNAddress();
					subCodeLength += element.decode(is, berTag);
					seqOf.add(element);
				}
			}
			while (subCodeLength < totalLength) {
				GSNAddress element = new GSNAddress();
				subCodeLength += element.decode(is, null);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<GSNAddress> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class ServingNodeAddress implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<GSNAddress> seqOf = null;

		public ServingNodeAddress() {
			seqOf = new ArrayList<GSNAddress>();
		}

		public ServingNodeAddress(byte[] code) {
			this.code = code;
		}

		public List<GSNAddress> getGSNAddress() {
			if (seqOf == null) {
				seqOf = new ArrayList<GSNAddress>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			if (length.val == -1) {
				while (true) {
					subCodeLength += berTag.decode(is);

					if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
						int nextByte = is.read();
						if (nextByte != 0) {
							if (nextByte == -1) {
								throw new EOFException("Unexpected end of input stream.");
							}
							throw new IOException("Decoded sequence has wrong end of contents octets");
						}
						codeLength += subCodeLength + 1;
						return codeLength;
					}

					GSNAddress element = new GSNAddress();
					subCodeLength += element.decode(is, berTag);
					seqOf.add(element);
				}
			}
			while (subCodeLength < totalLength) {
				GSNAddress element = new GSNAddress();
				subCodeLength += element.decode(is, null);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<GSNAddress> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class ListOfTrafficVolumes implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<ChangeOfCharCondition> seqOf = null;

		public ListOfTrafficVolumes() {
			seqOf = new ArrayList<ChangeOfCharCondition>();
		}

		public ListOfTrafficVolumes(byte[] code) {
			this.code = code;
		}

		public List<ChangeOfCharCondition> getChangeOfCharCondition() {
			if (seqOf == null) {
				seqOf = new ArrayList<ChangeOfCharCondition>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			if (length.val == -1) {
				while (true) {
					subCodeLength += berTag.decode(is);

					if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
						int nextByte = is.read();
						if (nextByte != 0) {
							if (nextByte == -1) {
								throw new EOFException("Unexpected end of input stream.");
							}
							throw new IOException("Decoded sequence has wrong end of contents octets");
						}
						codeLength += subCodeLength + 1;
						return codeLength;
					}

					ChangeOfCharCondition element = new ChangeOfCharCondition();
					subCodeLength += element.decode(is, false);
					seqOf.add(element);
				}
			}
			while (subCodeLength < totalLength) {
				ChangeOfCharCondition element = new ChangeOfCharCondition();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<ChangeOfCharCondition> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class ListOfRecordSequenceNumber implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<AddressSequenceNumberList> seqOf = null;

		public ListOfRecordSequenceNumber() {
			seqOf = new ArrayList<AddressSequenceNumberList>();
		}

		public ListOfRecordSequenceNumber(byte[] code) {
			this.code = code;
		}

		public List<AddressSequenceNumberList> getAddressSequenceNumberList() {
			if (seqOf == null) {
				seqOf = new ArrayList<AddressSequenceNumberList>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			if (length.val == -1) {
				while (true) {
					subCodeLength += berTag.decode(is);

					if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
						int nextByte = is.read();
						if (nextByte != 0) {
							if (nextByte == -1) {
								throw new EOFException("Unexpected end of input stream.");
							}
							throw new IOException("Decoded sequence has wrong end of contents octets");
						}
						codeLength += subCodeLength + 1;
						return codeLength;
					}

					AddressSequenceNumberList element = new AddressSequenceNumberList();
					subCodeLength += element.decode(is, false);
					seqOf.add(element);
				}
			}
			while (subCodeLength < totalLength) {
				AddressSequenceNumberList element = new AddressSequenceNumberList();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<AddressSequenceNumberList> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class ServingNodeType implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<com.bd.asn.zte.data.pgw_r8_new.ServingNodeType> seqOf = null;

		public ServingNodeType() {
			seqOf = new ArrayList<com.bd.asn.zte.data.pgw_r8_new.ServingNodeType>();
		}

		public ServingNodeType(byte[] code) {
			this.code = code;
		}

		public List<com.bd.asn.zte.data.pgw_r8_new.ServingNodeType> getServingNodeType() {
			if (seqOf == null) {
				seqOf = new ArrayList<com.bd.asn.zte.data.pgw_r8_new.ServingNodeType>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			if (length.val == -1) {
				while (true) {
					subCodeLength += berTag.decode(is);

					if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
						int nextByte = is.read();
						if (nextByte != 0) {
							if (nextByte == -1) {
								throw new EOFException("Unexpected end of input stream.");
							}
							throw new IOException("Decoded sequence has wrong end of contents octets");
						}
						codeLength += subCodeLength + 1;
						return codeLength;
					}

					com.bd.asn.zte.data.pgw_r8_new.ServingNodeType element = new com.bd.asn.zte.data.pgw_r8_new.ServingNodeType();
					subCodeLength += element.decode(is, false);
					seqOf.add(element);
				}
			}
			while (subCodeLength < totalLength) {
				com.bd.asn.zte.data.pgw_r8_new.ServingNodeType element = new com.bd.asn.zte.data.pgw_r8_new.ServingNodeType();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<com.bd.asn.zte.data.pgw_r8_new.ServingNodeType> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						sb.append(it.next());
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class ChgLocalSeqNoList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<AddressSequenceNumberList> seqOf = null;

		public ChgLocalSeqNoList() {
			seqOf = new ArrayList<AddressSequenceNumberList>();
		}

		public ChgLocalSeqNoList(byte[] code) {
			this.code = code;
		}

		public List<AddressSequenceNumberList> getAddressSequenceNumberList() {
			if (seqOf == null) {
				seqOf = new ArrayList<AddressSequenceNumberList>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			if (length.val == -1) {
				while (true) {
					subCodeLength += berTag.decode(is);

					if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
						int nextByte = is.read();
						if (nextByte != 0) {
							if (nextByte == -1) {
								throw new EOFException("Unexpected end of input stream.");
							}
							throw new IOException("Decoded sequence has wrong end of contents octets");
						}
						codeLength += subCodeLength + 1;
						return codeLength;
					}

					AddressSequenceNumberList element = new AddressSequenceNumberList();
					subCodeLength += element.decode(is, false);
					seqOf.add(element);
				}
			}
			while (subCodeLength < totalLength) {
				AddressSequenceNumberList element = new AddressSequenceNumberList();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<AddressSequenceNumberList> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class ListOfRANSecondaryRATUsageReports implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<RANSecondaryRATUsageReport> seqOf = null;

		public ListOfRANSecondaryRATUsageReports() {
			seqOf = new ArrayList<RANSecondaryRATUsageReport>();
		}

		public ListOfRANSecondaryRATUsageReports(byte[] code) {
			this.code = code;
		}

		public List<RANSecondaryRATUsageReport> getRANSecondaryRATUsageReport() {
			if (seqOf == null) {
				seqOf = new ArrayList<RANSecondaryRATUsageReport>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			if (length.val == -1) {
				while (true) {
					subCodeLength += berTag.decode(is);

					if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
						int nextByte = is.read();
						if (nextByte != 0) {
							if (nextByte == -1) {
								throw new EOFException("Unexpected end of input stream.");
							}
							throw new IOException("Decoded sequence has wrong end of contents octets");
						}
						codeLength += subCodeLength + 1;
						return codeLength;
					}

					RANSecondaryRATUsageReport element = new RANSecondaryRATUsageReport();
					subCodeLength += element.decode(is, false);
					seqOf.add(element);
				}
			}
			while (subCodeLength < totalLength) {
				RANSecondaryRATUsageReport element = new RANSecondaryRATUsageReport();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<RANSecondaryRATUsageReport> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 17);

	public byte[] code = null;
	private CallEventRecordType recordType = null;
	private IMSI servedIMSI = null;
	private SGWAddress sGWAddress = null;
	private ChargingID chargingID = null;
	private ServingNodeAddress servingNodeAddress = null;
	private AccessPointNameNI accessPointNameNI = null;
	private PDPType pdpPDNType = null;
	private PDPAddress servedPDPPDNAddress = null;
	private DynamicAddressFlag dynamicAddressFlag = null;
	private ListOfTrafficVolumes listOfTrafficVolumes = null;
	private TimeStamp recordOpeningTime = null;
	private CallDuration duration = null;
	private CauseForRecClosing causeForRecClosing = null;
	private Diagnostics diagnostics = null;
	private ListOfRecordSequenceNumber listOfRecordSequenceNumber = null;
	private NodeID nodeID = null;
	private ManagementExtensions recordExtensions = null;
	private RecordSeqNumber localSequenceNumber = null;
	private APNSelectionMode apnSelectionMode = null;
	private MSISDN servedMSISDN = null;
	private ChargingCharacteristics chargingCharacteristics = null;
	private ChChSelectionMode chChSelectionMode = null;
	private BerNull iMSsignalingContext = null;
	private PlmnId servingNodePLMNIdentifier = null;
	private IMEI servedIMEISV = null;
	private RATType rATType = null;
	private MSTimeZone mSTimeZone = null;
	private UserLocationInformation userLocationInformation = null;
	private SGWChange sGWChange = null;
	private ServingNodeType servingNodeType = null;
	private GSNAddress pGWAddressUsed = null;
	private PlmnId pGWPLMNIdentifier = null;
	private TimeStamp startTime = null;
	private TimeStamp stopTime = null;
	private ChargingID pDNConnectionID = null;
	private ChgLocalSeqNoList chgLocalSeqNoList = null;
	private ConsolidationResult consolidationResult = null;
	private BerNull iMSIunauthenticatedFlag = null;
	private BerNull lowPriorityIndicator = null;
	private DynamicAddressFlag dynamicAddressFlagExt = null;
	private CPCIoTEPSOptimisationIndicator cPCIoTEPSOptimisationIndicator = null;
	private UNIPDUCPOnlyFlag uNIPDUCPOnlyFlag = null;
	private ServingPLMNRateControl servingPLMNRateControl = null;
	private PDPPDNTypeExtension pDPPDNTypeExtension = null;
	private MOExceptionDataCounter mOExceptionDataCounter = null;
	private ListOfRANSecondaryRATUsageReports listOfRANSecondaryRATUsageReports = null;
	private PDPAddress servedPDPPDNAddressExt = null;
	private UserCSGInformation userCSGInformation = null;
	
	public SGWRecord() {
	}

	public SGWRecord(byte[] code) {
		this.code = code;
	}

	public void setRecordType(CallEventRecordType recordType) {
		this.recordType = recordType;
	}

	public CallEventRecordType getRecordType() {
		return recordType;
	}

	public void setServedIMSI(IMSI servedIMSI) {
		this.servedIMSI = servedIMSI;
	}

	public IMSI getServedIMSI() {
		return servedIMSI;
	}

	public void setSGWAddress(SGWAddress sGWAddress) {
		this.sGWAddress = sGWAddress;
	}

	public SGWAddress getSGWAddress() {
		return sGWAddress;
	}

	public void setChargingID(ChargingID chargingID) {
		this.chargingID = chargingID;
	}

	public ChargingID getChargingID() {
		return chargingID;
	}

	public void setServingNodeAddress(ServingNodeAddress servingNodeAddress) {
		this.servingNodeAddress = servingNodeAddress;
	}

	public ServingNodeAddress getServingNodeAddress() {
		return servingNodeAddress;
	}

	public void setAccessPointNameNI(AccessPointNameNI accessPointNameNI) {
		this.accessPointNameNI = accessPointNameNI;
	}

	public AccessPointNameNI getAccessPointNameNI() {
		return accessPointNameNI;
	}

	public void setPdpPDNType(PDPType pdpPDNType) {
		this.pdpPDNType = pdpPDNType;
	}

	public PDPType getPdpPDNType() {
		return pdpPDNType;
	}

	public void setServedPDPPDNAddress(PDPAddress servedPDPPDNAddress) {
		this.servedPDPPDNAddress = servedPDPPDNAddress;
	}

	public PDPAddress getServedPDPPDNAddress() {
		return servedPDPPDNAddress;
	}

	public void setDynamicAddressFlag(DynamicAddressFlag dynamicAddressFlag) {
		this.dynamicAddressFlag = dynamicAddressFlag;
	}

	public DynamicAddressFlag getDynamicAddressFlag() {
		return dynamicAddressFlag;
	}

	public void setListOfTrafficVolumes(ListOfTrafficVolumes listOfTrafficVolumes) {
		this.listOfTrafficVolumes = listOfTrafficVolumes;
	}

	public ListOfTrafficVolumes getListOfTrafficVolumes() {
		return listOfTrafficVolumes;
	}

	public void setRecordOpeningTime(TimeStamp recordOpeningTime) {
		this.recordOpeningTime = recordOpeningTime;
	}

	public TimeStamp getRecordOpeningTime() {
		return recordOpeningTime;
	}

	public void setDuration(CallDuration duration) {
		this.duration = duration;
	}

	public CallDuration getDuration() {
		return duration;
	}

	public void setCauseForRecClosing(CauseForRecClosing causeForRecClosing) {
		this.causeForRecClosing = causeForRecClosing;
	}

	public CauseForRecClosing getCauseForRecClosing() {
		return causeForRecClosing;
	}

	public void setDiagnostics(Diagnostics diagnostics) {
		this.diagnostics = diagnostics;
	}

	public Diagnostics getDiagnostics() {
		return diagnostics;
	}

	public void setListOfRecordSequenceNumber(ListOfRecordSequenceNumber listOfRecordSequenceNumber) {
		this.listOfRecordSequenceNumber = listOfRecordSequenceNumber;
	}

	public ListOfRecordSequenceNumber getListOfRecordSequenceNumber() {
		return listOfRecordSequenceNumber;
	}

	public void setNodeID(NodeID nodeID) {
		this.nodeID = nodeID;
	}

	public NodeID getNodeID() {
		return nodeID;
	}

	public void setRecordExtensions(ManagementExtensions recordExtensions) {
		this.recordExtensions = recordExtensions;
	}

	public ManagementExtensions getRecordExtensions() {
		return recordExtensions;
	}

	public void setLocalSequenceNumber(RecordSeqNumber localSequenceNumber) {
		this.localSequenceNumber = localSequenceNumber;
	}

	public RecordSeqNumber getLocalSequenceNumber() {
		return localSequenceNumber;
	}

	public void setApnSelectionMode(APNSelectionMode apnSelectionMode) {
		this.apnSelectionMode = apnSelectionMode;
	}

	public APNSelectionMode getApnSelectionMode() {
		return apnSelectionMode;
	}

	public void setServedMSISDN(MSISDN servedMSISDN) {
		this.servedMSISDN = servedMSISDN;
	}

	public MSISDN getServedMSISDN() {
		return servedMSISDN;
	}

	public void setChargingCharacteristics(ChargingCharacteristics chargingCharacteristics) {
		this.chargingCharacteristics = chargingCharacteristics;
	}

	public ChargingCharacteristics getChargingCharacteristics() {
		return chargingCharacteristics;
	}

	public void setChChSelectionMode(ChChSelectionMode chChSelectionMode) {
		this.chChSelectionMode = chChSelectionMode;
	}

	public ChChSelectionMode getChChSelectionMode() {
		return chChSelectionMode;
	}

	public void setIMSsignalingContext(BerNull iMSsignalingContext) {
		this.iMSsignalingContext = iMSsignalingContext;
	}

	public BerNull getIMSsignalingContext() {
		return iMSsignalingContext;
	}

	public void setServingNodePLMNIdentifier(PlmnId servingNodePLMNIdentifier) {
		this.servingNodePLMNIdentifier = servingNodePLMNIdentifier;
	}

	public PlmnId getServingNodePLMNIdentifier() {
		return servingNodePLMNIdentifier;
	}

	public void setServedIMEISV(IMEI servedIMEISV) {
		this.servedIMEISV = servedIMEISV;
	}

	public IMEI getServedIMEISV() {
		return servedIMEISV;
	}

	public void setRATType(RATType rATType) {
		this.rATType = rATType;
	}

	public RATType getRATType() {
		return rATType;
	}

	public void setMSTimeZone(MSTimeZone mSTimeZone) {
		this.mSTimeZone = mSTimeZone;
	}

	public MSTimeZone getMSTimeZone() {
		return mSTimeZone;
	}

	public void setUserLocationInformation(UserLocationInformation userLocationInformation) {
		this.userLocationInformation = userLocationInformation;
	}

	public UserLocationInformation getUserLocationInformation() {
		return userLocationInformation;
	}

	public void setSGWChange(SGWChange sGWChange) {
		this.sGWChange = sGWChange;
	}

	public SGWChange getSGWChange() {
		return sGWChange;
	}

	public void setServingNodeType(ServingNodeType servingNodeType) {
		this.servingNodeType = servingNodeType;
	}

	public ServingNodeType getServingNodeType() {
		return servingNodeType;
	}

	public void setPGWAddressUsed(GSNAddress pGWAddressUsed) {
		this.pGWAddressUsed = pGWAddressUsed;
	}

	public GSNAddress getPGWAddressUsed() {
		return pGWAddressUsed;
	}

	public void setPGWPLMNIdentifier(PlmnId pGWPLMNIdentifier) {
		this.pGWPLMNIdentifier = pGWPLMNIdentifier;
	}

	public PlmnId getPGWPLMNIdentifier() {
		return pGWPLMNIdentifier;
	}

	public void setStartTime(TimeStamp startTime) {
		this.startTime = startTime;
	}

	public TimeStamp getStartTime() {
		return startTime;
	}

	public void setStopTime(TimeStamp stopTime) {
		this.stopTime = stopTime;
	}

	public TimeStamp getStopTime() {
		return stopTime;
	}

	public void setPDNConnectionID(ChargingID pDNConnectionID) {
		this.pDNConnectionID = pDNConnectionID;
	}

	public ChargingID getPDNConnectionID() {
		return pDNConnectionID;
	}

	public void setChgLocalSeqNoList(ChgLocalSeqNoList chgLocalSeqNoList) {
		this.chgLocalSeqNoList = chgLocalSeqNoList;
	}

	public ChgLocalSeqNoList getChgLocalSeqNoList() {
		return chgLocalSeqNoList;
	}

	public void setConsolidationResult(ConsolidationResult consolidationResult) {
		this.consolidationResult = consolidationResult;
	}

	public ConsolidationResult getConsolidationResult() {
		return consolidationResult;
	}

	public void setIMSIunauthenticatedFlag(BerNull iMSIunauthenticatedFlag) {
		this.iMSIunauthenticatedFlag = iMSIunauthenticatedFlag;
	}

	public BerNull getIMSIunauthenticatedFlag() {
		return iMSIunauthenticatedFlag;
	}

	public void setLowPriorityIndicator(BerNull lowPriorityIndicator) {
		this.lowPriorityIndicator = lowPriorityIndicator;
	}

	public BerNull getLowPriorityIndicator() {
		return lowPriorityIndicator;
	}

	public void setDynamicAddressFlagExt(DynamicAddressFlag dynamicAddressFlagExt) {
		this.dynamicAddressFlagExt = dynamicAddressFlagExt;
	}

	public DynamicAddressFlag getDynamicAddressFlagExt() {
		return dynamicAddressFlagExt;
	}

	public void setCPCIoTEPSOptimisationIndicator(CPCIoTEPSOptimisationIndicator cPCIoTEPSOptimisationIndicator) {
		this.cPCIoTEPSOptimisationIndicator = cPCIoTEPSOptimisationIndicator;
	}

	public CPCIoTEPSOptimisationIndicator getCPCIoTEPSOptimisationIndicator() {
		return cPCIoTEPSOptimisationIndicator;
	}

	public void setUNIPDUCPOnlyFlag(UNIPDUCPOnlyFlag uNIPDUCPOnlyFlag) {
		this.uNIPDUCPOnlyFlag = uNIPDUCPOnlyFlag;
	}

	public UNIPDUCPOnlyFlag getUNIPDUCPOnlyFlag() {
		return uNIPDUCPOnlyFlag;
	}

	public void setServingPLMNRateControl(ServingPLMNRateControl servingPLMNRateControl) {
		this.servingPLMNRateControl = servingPLMNRateControl;
	}

	public ServingPLMNRateControl getServingPLMNRateControl() {
		return servingPLMNRateControl;
	}

	public void setPDPPDNTypeExtension(PDPPDNTypeExtension pDPPDNTypeExtension) {
		this.pDPPDNTypeExtension = pDPPDNTypeExtension;
	}

	public PDPPDNTypeExtension getPDPPDNTypeExtension() {
		return pDPPDNTypeExtension;
	}

	public void setMOExceptionDataCounter(MOExceptionDataCounter mOExceptionDataCounter) {
		this.mOExceptionDataCounter = mOExceptionDataCounter;
	}

	public MOExceptionDataCounter getMOExceptionDataCounter() {
		return mOExceptionDataCounter;
	}

	public void setListOfRANSecondaryRATUsageReports(ListOfRANSecondaryRATUsageReports listOfRANSecondaryRATUsageReports) {
		this.listOfRANSecondaryRATUsageReports = listOfRANSecondaryRATUsageReports;
	}

	public ListOfRANSecondaryRATUsageReports getListOfRANSecondaryRATUsageReports() {
		return listOfRANSecondaryRATUsageReports;
	}

	public void setServedPDPPDNAddressExt(PDPAddress servedPDPPDNAddressExt) {
		this.servedPDPPDNAddressExt = servedPDPPDNAddressExt;
	}

	public PDPAddress getServedPDPPDNAddressExt() {
		return servedPDPPDNAddressExt;
	}

	public void setUserCSGInformation(UserCSGInformation userCSGInformation) {
		this.userCSGInformation = userCSGInformation;
	}

	public UserCSGInformation getUserCSGInformation() {
		return userCSGInformation;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (userCSGInformation != null) {
			codeLength += userCSGInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 101
			reverseOS.write(0x65);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (servedPDPPDNAddressExt != null) {
			sublength = servedPDPPDNAddressExt.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 100
			reverseOS.write(0x64);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (listOfRANSecondaryRATUsageReports != null) {
			codeLength += listOfRANSecondaryRATUsageReports.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 64
			reverseOS.write(0x40);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (mOExceptionDataCounter != null) {
			codeLength += mOExceptionDataCounter.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 63
			reverseOS.write(0x3F);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (pDPPDNTypeExtension != null) {
			codeLength += pDPPDNTypeExtension.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 62
			reverseOS.write(0x3E);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (servingPLMNRateControl != null) {
			codeLength += servingPLMNRateControl.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 61
			reverseOS.write(0x3D);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (uNIPDUCPOnlyFlag != null) {
			codeLength += uNIPDUCPOnlyFlag.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 60
			reverseOS.write(0x3C);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (cPCIoTEPSOptimisationIndicator != null) {
			codeLength += cPCIoTEPSOptimisationIndicator.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 59
			reverseOS.write(0x3B);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (dynamicAddressFlagExt != null) {
			codeLength += dynamicAddressFlagExt.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 47
			reverseOS.write(0x2F);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (lowPriorityIndicator != null) {
			codeLength += lowPriorityIndicator.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 44
			reverseOS.write(0x2C);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (iMSIunauthenticatedFlag != null) {
			codeLength += iMSIunauthenticatedFlag.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 43
			reverseOS.write(0x2B);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (consolidationResult != null) {
			codeLength += consolidationResult.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 42
			reverseOS.write(0x2A);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (chgLocalSeqNoList != null) {
			codeLength += chgLocalSeqNoList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 41
			reverseOS.write(0x29);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (pDNConnectionID != null) {
			codeLength += pDNConnectionID.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 40
			reverseOS.write(0x28);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (stopTime != null) {
			codeLength += stopTime.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 39
			reverseOS.write(0x27);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (startTime != null) {
			codeLength += startTime.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 38
			reverseOS.write(0x26);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (pGWPLMNIdentifier != null) {
			codeLength += pGWPLMNIdentifier.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 37
			reverseOS.write(0x25);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (pGWAddressUsed != null) {
			sublength = pGWAddressUsed.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 36
			reverseOS.write(0x24);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (servingNodeType != null) {
			codeLength += servingNodeType.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 35
			reverseOS.write(0x23);
			reverseOS.write(0xBF);
			codeLength += 2;
		}
		
		if (sGWChange != null) {
			codeLength += sGWChange.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 34
			reverseOS.write(0x22);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (userLocationInformation != null) {
			codeLength += userLocationInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 32
			reverseOS.write(0x20);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (mSTimeZone != null) {
			codeLength += mSTimeZone.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 31
			reverseOS.write(0x1F);
			reverseOS.write(0x9F);
			codeLength += 2;
		}
		
		if (rATType != null) {
			codeLength += rATType.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 30
			reverseOS.write(0x9E);
			codeLength += 1;
		}
		
		if (servedIMEISV != null) {
			codeLength += servedIMEISV.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 29
			reverseOS.write(0x9D);
			codeLength += 1;
		}
		
		if (servingNodePLMNIdentifier != null) {
			codeLength += servingNodePLMNIdentifier.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 27
			reverseOS.write(0x9B);
			codeLength += 1;
		}
		
		if (iMSsignalingContext != null) {
			codeLength += iMSsignalingContext.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 25
			reverseOS.write(0x99);
			codeLength += 1;
		}
		
		if (chChSelectionMode != null) {
			codeLength += chChSelectionMode.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 24
			reverseOS.write(0x98);
			codeLength += 1;
		}
		
		if (chargingCharacteristics != null) {
			codeLength += chargingCharacteristics.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 23
			reverseOS.write(0x97);
			codeLength += 1;
		}
		
		if (servedMSISDN != null) {
			codeLength += servedMSISDN.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 22
			reverseOS.write(0x96);
			codeLength += 1;
		}
		
		if (apnSelectionMode != null) {
			codeLength += apnSelectionMode.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 21
			reverseOS.write(0x95);
			codeLength += 1;
		}
		
		codeLength += localSequenceNumber.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 20
		reverseOS.write(0x94);
		codeLength += 1;
		
		if (recordExtensions != null) {
			codeLength += recordExtensions.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 19
			reverseOS.write(0x93);
			codeLength += 1;
		}
		
		if (nodeID != null) {
			codeLength += nodeID.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 18
			reverseOS.write(0x92);
			codeLength += 1;
		}
		
		if (listOfRecordSequenceNumber != null) {
			codeLength += listOfRecordSequenceNumber.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 17
			reverseOS.write(0xB1);
			codeLength += 1;
		}
		
		if (diagnostics != null) {
			sublength = diagnostics.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 16
			reverseOS.write(0xB0);
			codeLength += 1;
		}
		
		if (causeForRecClosing != null) {
			codeLength += causeForRecClosing.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 15
			reverseOS.write(0x8F);
			codeLength += 1;
		}
		
		if (duration != null) {
			codeLength += duration.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 14
			reverseOS.write(0x8E);
			codeLength += 1;
		}
		
		if (recordOpeningTime != null) {
			codeLength += recordOpeningTime.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 13
			reverseOS.write(0x8D);
			codeLength += 1;
		}
		
		if (listOfTrafficVolumes != null) {
			codeLength += listOfTrafficVolumes.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
			reverseOS.write(0xAC);
			codeLength += 1;
		}
		
		if (dynamicAddressFlag != null) {
			codeLength += dynamicAddressFlag.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			reverseOS.write(0x8B);
			codeLength += 1;
		}
		
		if (servedPDPPDNAddress != null) {
			sublength = servedPDPPDNAddress.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		if (pdpPDNType != null) {
			codeLength += pdpPDNType.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (accessPointNameNI != null) {
			codeLength += accessPointNameNI.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (servingNodeAddress != null) {
			sublength = servingNodeAddress.encode(reverseOS, true);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			reverseOS.write(0xA6);
			codeLength += 1;
		}
		
		if (chargingID != null) {
			codeLength += chargingID.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (sGWAddress != null) {
			sublength = sGWAddress.encode(reverseOS, true);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			reverseOS.write(0xA4);
			codeLength += 1;
		}
		
		if (servedIMSI != null) {
			codeLength += servedIMSI.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		codeLength += recordType.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		if (totalLength == -1) {
			subCodeLength += berTag.decode(is);

			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				recordType = new CallEventRecordType();
				subCodeLength += recordType.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				servedIMSI = new IMSI();
				subCodeLength += servedIMSI.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
				codeLength += length.decode(is);
				sGWAddress = new SGWAddress();
				subCodeLength += sGWAddress.decode(is, true);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				chargingID = new ChargingID();
				subCodeLength += chargingID.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
				codeLength += length.decode(is);
				servingNodeAddress = new ServingNodeAddress();
				subCodeLength += servingNodeAddress.decode(is, true);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				accessPointNameNI = new AccessPointNameNI();
				subCodeLength += accessPointNameNI.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
				pdpPDNType = new PDPType();
				subCodeLength += pdpPDNType.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
				subCodeLength += length.decode(is);
				servedPDPPDNAddress = new PDPAddress();
				int choiceDecodeLength = servedPDPPDNAddress.decode(is, null);
				if (choiceDecodeLength != 0) {
					subCodeLength += choiceDecodeLength;
					subCodeLength += berTag.decode(is);
				}
				else {
					servedPDPPDNAddress = null;
				}

			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
				dynamicAddressFlag = new DynamicAddressFlag();
				subCodeLength += dynamicAddressFlag.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
				listOfTrafficVolumes = new ListOfTrafficVolumes();
				subCodeLength += listOfTrafficVolumes.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
				recordOpeningTime = new TimeStamp();
				subCodeLength += recordOpeningTime.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
				duration = new CallDuration();
				subCodeLength += duration.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
				causeForRecClosing = new CauseForRecClosing();
				subCodeLength += causeForRecClosing.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 16)) {
				subCodeLength += length.decode(is);
				diagnostics = new Diagnostics();
				int choiceDecodeLength = diagnostics.decode(is, null);
				if (choiceDecodeLength != 0) {
					subCodeLength += choiceDecodeLength;
					subCodeLength += berTag.decode(is);
				}
				else {
					diagnostics = null;
				}

			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 17)) {
				listOfRecordSequenceNumber = new ListOfRecordSequenceNumber();
				subCodeLength += listOfRecordSequenceNumber.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 18)) {
				nodeID = new NodeID();
				subCodeLength += nodeID.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 19)) {
				recordExtensions = new ManagementExtensions();
				subCodeLength += recordExtensions.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 20)) {
				localSequenceNumber = new RecordSeqNumber();
				subCodeLength += localSequenceNumber.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 21)) {
				apnSelectionMode = new APNSelectionMode();
				subCodeLength += apnSelectionMode.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 22)) {
				servedMSISDN = new MSISDN();
				subCodeLength += servedMSISDN.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 23)) {
				chargingCharacteristics = new ChargingCharacteristics();
				subCodeLength += chargingCharacteristics.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 24)) {
				chChSelectionMode = new ChChSelectionMode();
				subCodeLength += chChSelectionMode.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 25)) {
				iMSsignalingContext = new BerNull();
				subCodeLength += iMSsignalingContext.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 27)) {
				servingNodePLMNIdentifier = new PlmnId();
				subCodeLength += servingNodePLMNIdentifier.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 29)) {
				servedIMEISV = new IMEI();
				subCodeLength += servedIMEISV.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 30)) {
				rATType = new RATType();
				subCodeLength += rATType.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 31)) {
				mSTimeZone = new MSTimeZone();
				subCodeLength += mSTimeZone.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 32)) {
				userLocationInformation = new UserLocationInformation();
				subCodeLength += userLocationInformation.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 34)) {
				sGWChange = new SGWChange();
				subCodeLength += sGWChange.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 35)) {
				servingNodeType = new ServingNodeType();
				subCodeLength += servingNodeType.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 36)) {
				subCodeLength += length.decode(is);
				pGWAddressUsed = new GSNAddress();
				int choiceDecodeLength = pGWAddressUsed.decode(is, null);
				if (choiceDecodeLength != 0) {
					subCodeLength += choiceDecodeLength;
					subCodeLength += berTag.decode(is);
				}
				else {
					pGWAddressUsed = null;
				}

			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 37)) {
				pGWPLMNIdentifier = new PlmnId();
				subCodeLength += pGWPLMNIdentifier.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 38)) {
				startTime = new TimeStamp();
				subCodeLength += startTime.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 39)) {
				stopTime = new TimeStamp();
				subCodeLength += stopTime.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 40)) {
				pDNConnectionID = new ChargingID();
				subCodeLength += pDNConnectionID.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 41)) {
				chgLocalSeqNoList = new ChgLocalSeqNoList();
				subCodeLength += chgLocalSeqNoList.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 42)) {
				consolidationResult = new ConsolidationResult();
				subCodeLength += consolidationResult.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 43)) {
				iMSIunauthenticatedFlag = new BerNull();
				subCodeLength += iMSIunauthenticatedFlag.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 44)) {
				lowPriorityIndicator = new BerNull();
				subCodeLength += lowPriorityIndicator.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 47)) {
				dynamicAddressFlagExt = new DynamicAddressFlag();
				subCodeLength += dynamicAddressFlagExt.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 59)) {
				cPCIoTEPSOptimisationIndicator = new CPCIoTEPSOptimisationIndicator();
				subCodeLength += cPCIoTEPSOptimisationIndicator.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 60)) {
				uNIPDUCPOnlyFlag = new UNIPDUCPOnlyFlag();
				subCodeLength += uNIPDUCPOnlyFlag.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 61)) {
				servingPLMNRateControl = new ServingPLMNRateControl();
				subCodeLength += servingPLMNRateControl.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 62)) {
				pDPPDNTypeExtension = new PDPPDNTypeExtension();
				subCodeLength += pDPPDNTypeExtension.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 63)) {
				mOExceptionDataCounter = new MOExceptionDataCounter();
				subCodeLength += mOExceptionDataCounter.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 64)) {
				listOfRANSecondaryRATUsageReports = new ListOfRANSecondaryRATUsageReports();
				subCodeLength += listOfRANSecondaryRATUsageReports.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 100)) {
				subCodeLength += length.decode(is);
				servedPDPPDNAddressExt = new PDPAddress();
				int choiceDecodeLength = servedPDPPDNAddressExt.decode(is, null);
				if (choiceDecodeLength != 0) {
					subCodeLength += choiceDecodeLength;
					subCodeLength += berTag.decode(is);
				}
				else {
					servedPDPPDNAddressExt = null;
				}

			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 101)) {
				userCSGInformation = new UserCSGInformation();
				subCodeLength += userCSGInformation.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			int nextByte = is.read();
			if (berTag.tagNumber != 0 || berTag.tagClass != 0 || berTag.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		while (subCodeLength < totalLength) {
			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				recordType = new CallEventRecordType();
				subCodeLength += recordType.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				servedIMSI = new IMSI();
				subCodeLength += servedIMSI.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
				subCodeLength += new BerLength().decode(is);
				sGWAddress = new SGWAddress();
				subCodeLength += sGWAddress.decode(is, true);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				chargingID = new ChargingID();
				subCodeLength += chargingID.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
				subCodeLength += new BerLength().decode(is);
				servingNodeAddress = new ServingNodeAddress();
				subCodeLength += servingNodeAddress.decode(is, true);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				accessPointNameNI = new AccessPointNameNI();
				subCodeLength += accessPointNameNI.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
				pdpPDNType = new PDPType();
				subCodeLength += pdpPDNType.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
				subCodeLength += new BerLength().decode(is);
				servedPDPPDNAddress = new PDPAddress();
				subCodeLength += servedPDPPDNAddress.decode(is, null);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
				dynamicAddressFlag = new DynamicAddressFlag();
				subCodeLength += dynamicAddressFlag.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
				listOfTrafficVolumes = new ListOfTrafficVolumes();
				subCodeLength += listOfTrafficVolumes.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
				recordOpeningTime = new TimeStamp();
				subCodeLength += recordOpeningTime.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
				duration = new CallDuration();
				subCodeLength += duration.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
				causeForRecClosing = new CauseForRecClosing();
				subCodeLength += causeForRecClosing.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 16)) {
				subCodeLength += new BerLength().decode(is);
				diagnostics = new Diagnostics();
				subCodeLength += diagnostics.decode(is, null);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 17)) {
				listOfRecordSequenceNumber = new ListOfRecordSequenceNumber();
				subCodeLength += listOfRecordSequenceNumber.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 18)) {
				nodeID = new NodeID();
				subCodeLength += nodeID.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 19)) {
				recordExtensions = new ManagementExtensions();
				subCodeLength += recordExtensions.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 20)) {
				localSequenceNumber = new RecordSeqNumber();
				subCodeLength += localSequenceNumber.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 21)) {
				apnSelectionMode = new APNSelectionMode();
				subCodeLength += apnSelectionMode.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 22)) {
				servedMSISDN = new MSISDN();
				subCodeLength += servedMSISDN.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 23)) {
				chargingCharacteristics = new ChargingCharacteristics();
				subCodeLength += chargingCharacteristics.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 24)) {
				chChSelectionMode = new ChChSelectionMode();
				subCodeLength += chChSelectionMode.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 25)) {
				iMSsignalingContext = new BerNull();
				subCodeLength += iMSsignalingContext.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 27)) {
				servingNodePLMNIdentifier = new PlmnId();
				subCodeLength += servingNodePLMNIdentifier.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 29)) {
				servedIMEISV = new IMEI();
				subCodeLength += servedIMEISV.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 30)) {
				rATType = new RATType();
				subCodeLength += rATType.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 31)) {
				mSTimeZone = new MSTimeZone();
				subCodeLength += mSTimeZone.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 32)) {
				userLocationInformation = new UserLocationInformation();
				subCodeLength += userLocationInformation.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 34)) {
				sGWChange = new SGWChange();
				subCodeLength += sGWChange.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 35)) {
				servingNodeType = new ServingNodeType();
				subCodeLength += servingNodeType.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 36)) {
				subCodeLength += new BerLength().decode(is);
				pGWAddressUsed = new GSNAddress();
				subCodeLength += pGWAddressUsed.decode(is, null);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 37)) {
				pGWPLMNIdentifier = new PlmnId();
				subCodeLength += pGWPLMNIdentifier.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 38)) {
				startTime = new TimeStamp();
				subCodeLength += startTime.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 39)) {
				stopTime = new TimeStamp();
				subCodeLength += stopTime.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 40)) {
				pDNConnectionID = new ChargingID();
				subCodeLength += pDNConnectionID.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 41)) {
				chgLocalSeqNoList = new ChgLocalSeqNoList();
				subCodeLength += chgLocalSeqNoList.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 42)) {
				consolidationResult = new ConsolidationResult();
				subCodeLength += consolidationResult.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 43)) {
				iMSIunauthenticatedFlag = new BerNull();
				subCodeLength += iMSIunauthenticatedFlag.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 44)) {
				lowPriorityIndicator = new BerNull();
				subCodeLength += lowPriorityIndicator.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 47)) {
				dynamicAddressFlagExt = new DynamicAddressFlag();
				subCodeLength += dynamicAddressFlagExt.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 59)) {
				cPCIoTEPSOptimisationIndicator = new CPCIoTEPSOptimisationIndicator();
				subCodeLength += cPCIoTEPSOptimisationIndicator.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 60)) {
				uNIPDUCPOnlyFlag = new UNIPDUCPOnlyFlag();
				subCodeLength += uNIPDUCPOnlyFlag.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 61)) {
				servingPLMNRateControl = new ServingPLMNRateControl();
				subCodeLength += servingPLMNRateControl.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 62)) {
				pDPPDNTypeExtension = new PDPPDNTypeExtension();
				subCodeLength += pDPPDNTypeExtension.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 63)) {
				mOExceptionDataCounter = new MOExceptionDataCounter();
				subCodeLength += mOExceptionDataCounter.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 64)) {
				listOfRANSecondaryRATUsageReports = new ListOfRANSecondaryRATUsageReports();
				subCodeLength += listOfRANSecondaryRATUsageReports.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 100)) {
				subCodeLength += new BerLength().decode(is);
				servedPDPPDNAddressExt = new PDPAddress();
				subCodeLength += servedPDPPDNAddressExt.decode(is, null);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 101)) {
				userCSGInformation = new UserCSGInformation();
				subCodeLength += userCSGInformation.decode(is, false);
			}
		}
		if (subCodeLength != totalLength) {
			throw new IOException("Length of set does not match length tag, length tag: " + totalLength + ", actual set length: " + subCodeLength);

		}
		codeLength += subCodeLength;

		return codeLength;
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (recordType != null) {
			sb.append("recordType: ").append(recordType);
		}
		else {
			sb.append("recordType: <empty-required-field>");
		}
		
		if (servedIMSI != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servedIMSI: ").append(servedIMSI);
		}
		
		if (sGWAddress != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sGWAddress: ");
			sGWAddress.appendAsString(sb, indentLevel + 1);
		}
		
		if (chargingID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargingID: ").append(chargingID);
		}
		
		if (servingNodeAddress != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servingNodeAddress: ");
			servingNodeAddress.appendAsString(sb, indentLevel + 1);
		}
		
		if (accessPointNameNI != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accessPointNameNI: ").append(accessPointNameNI);
		}
		
		if (pdpPDNType != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pdpPDNType: ").append(pdpPDNType);
		}
		
		if (servedPDPPDNAddress != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servedPDPPDNAddress: ");
			servedPDPPDNAddress.appendAsString(sb, indentLevel + 1);
		}
		
		if (dynamicAddressFlag != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dynamicAddressFlag: ").append(dynamicAddressFlag);
		}
		
		if (listOfTrafficVolumes != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("listOfTrafficVolumes: ");
			listOfTrafficVolumes.appendAsString(sb, indentLevel + 1);
		}
		
		if (recordOpeningTime != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("recordOpeningTime: ").append(recordOpeningTime);
		}
		
		if (duration != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("duration: ").append(duration);
		}
		
		if (causeForRecClosing != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("causeForRecClosing: ").append(causeForRecClosing);
		}
		
		if (diagnostics != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("diagnostics: ");
			diagnostics.appendAsString(sb, indentLevel + 1);
		}
		
		if (listOfRecordSequenceNumber != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("listOfRecordSequenceNumber: ");
			listOfRecordSequenceNumber.appendAsString(sb, indentLevel + 1);
		}
		
		if (nodeID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nodeID: ").append(nodeID);
		}
		
		if (recordExtensions != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("recordExtensions: ").append(recordExtensions);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (localSequenceNumber != null) {
			sb.append("localSequenceNumber: ").append(localSequenceNumber);
		}
		else {
			sb.append("localSequenceNumber: <empty-required-field>");
		}
		
		if (apnSelectionMode != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("apnSelectionMode: ").append(apnSelectionMode);
		}
		
		if (servedMSISDN != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servedMSISDN: ").append(servedMSISDN);
		}
		
		if (chargingCharacteristics != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargingCharacteristics: ").append(chargingCharacteristics);
		}
		
		if (chChSelectionMode != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chChSelectionMode: ").append(chChSelectionMode);
		}
		
		if (iMSsignalingContext != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("iMSsignalingContext: ").append(iMSsignalingContext);
		}
		
		if (servingNodePLMNIdentifier != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servingNodePLMNIdentifier: ").append(servingNodePLMNIdentifier);
		}
		
		if (servedIMEISV != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servedIMEISV: ").append(servedIMEISV);
		}
		
		if (rATType != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rATType: ").append(rATType);
		}
		
		if (mSTimeZone != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mSTimeZone: ").append(mSTimeZone);
		}
		
		if (userLocationInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("userLocationInformation: ").append(userLocationInformation);
		}
		
		if (sGWChange != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sGWChange: ").append(sGWChange);
		}
		
		if (servingNodeType != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servingNodeType: ");
			servingNodeType.appendAsString(sb, indentLevel + 1);
		}
		
		if (pGWAddressUsed != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pGWAddressUsed: ");
			pGWAddressUsed.appendAsString(sb, indentLevel + 1);
		}
		
		if (pGWPLMNIdentifier != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pGWPLMNIdentifier: ").append(pGWPLMNIdentifier);
		}
		
		if (startTime != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("startTime: ").append(startTime);
		}
		
		if (stopTime != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("stopTime: ").append(stopTime);
		}
		
		if (pDNConnectionID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pDNConnectionID: ").append(pDNConnectionID);
		}
		
		if (chgLocalSeqNoList != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chgLocalSeqNoList: ");
			chgLocalSeqNoList.appendAsString(sb, indentLevel + 1);
		}
		
		if (consolidationResult != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("consolidationResult: ").append(consolidationResult);
		}
		
		if (iMSIunauthenticatedFlag != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("iMSIunauthenticatedFlag: ").append(iMSIunauthenticatedFlag);
		}
		
		if (lowPriorityIndicator != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("lowPriorityIndicator: ").append(lowPriorityIndicator);
		}
		
		if (dynamicAddressFlagExt != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dynamicAddressFlagExt: ").append(dynamicAddressFlagExt);
		}
		
		if (cPCIoTEPSOptimisationIndicator != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cPCIoTEPSOptimisationIndicator: ").append(cPCIoTEPSOptimisationIndicator);
		}
		
		if (uNIPDUCPOnlyFlag != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("uNIPDUCPOnlyFlag: ").append(uNIPDUCPOnlyFlag);
		}
		
		if (servingPLMNRateControl != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servingPLMNRateControl: ");
			servingPLMNRateControl.appendAsString(sb, indentLevel + 1);
		}
		
		if (pDPPDNTypeExtension != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pDPPDNTypeExtension: ").append(pDPPDNTypeExtension);
		}
		
		if (mOExceptionDataCounter != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mOExceptionDataCounter: ");
			mOExceptionDataCounter.appendAsString(sb, indentLevel + 1);
		}
		
		if (listOfRANSecondaryRATUsageReports != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("listOfRANSecondaryRATUsageReports: ");
			listOfRANSecondaryRATUsageReports.appendAsString(sb, indentLevel + 1);
		}
		
		if (servedPDPPDNAddressExt != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servedPDPPDNAddressExt: ");
			servedPDPPDNAddressExt.appendAsString(sb, indentLevel + 1);
		}
		
		if (userCSGInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("userCSGInformation: ");
			userCSGInformation.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

